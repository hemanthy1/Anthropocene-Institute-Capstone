[{"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/About/About.js":"1","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Navbar/Navbar.js":"2","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Accordion/Accordion.js":"3","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Faq/Faq.js":"4","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Footer/Footer.js":"5","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/DirectAirCapture/DirectAirCapture.js":"6","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Data/Data.js":"7","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Reforestation/Reforestation.js":"8","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/HomeBodyIntro/HomeBodyIntro.js":"9","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/OptimizationToolBlurb/OptimizationToolBlurb.js":"10","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/NoPage/NoPage.js":"11","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Articles/Articles.js":"12","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Dropdown/Dropdown.js":"13","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/index.js":"14","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/reportWebVitals.js":"15","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/App.js":"16","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Home/Home.js":"17","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Layout/Layout.js":"18","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Tools/Tools.js":"19","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ArticleLink/ArticleLink.js":"20","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/MoreInfo/MoreInfo.js":"21","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/DACMap/DACMap.js":"22","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/KelpMap/KelpMap.js":"23","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/KelpFarms/KelpFarms.js":"24","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ReforestationMap/ReforestationMap.js":"25"},{"size":5991,"mtime":1699471184534,"results":"26","hashOfConfig":"27"},{"size":3815,"mtime":1699471184530,"results":"28","hashOfConfig":"27"},{"size":1500,"mtime":1699471184451,"results":"29","hashOfConfig":"27"},{"size":3018,"mtime":1699471184536,"results":"30","hashOfConfig":"27"},{"size":2261,"mtime":1699471184455,"results":"31","hashOfConfig":"27"},{"size":1181,"mtime":1699471184536,"results":"32","hashOfConfig":"27"},{"size":3309,"mtime":1699471184535,"results":"33","hashOfConfig":"27"},{"size":937,"mtime":1699471184541,"results":"34","hashOfConfig":"27"},{"size":950,"mtime":1699471184456,"results":"35","hashOfConfig":"27"},{"size":5474,"mtime":1699471184531,"results":"36","hashOfConfig":"27"},{"size":501,"mtime":1699471184540,"results":"37","hashOfConfig":"27"},{"size":2305,"mtime":1699471184535,"results":"38","hashOfConfig":"27"},{"size":712,"mtime":1698335640843,"results":"39","hashOfConfig":"27"},{"size":574,"mtime":1699471184534,"results":"40","hashOfConfig":"27"},{"size":362,"mtime":1699471184541,"results":"41","hashOfConfig":"27"},{"size":1543,"mtime":1699471184302,"results":"42","hashOfConfig":"27"},{"size":301,"mtime":1699471184536,"results":"43","hashOfConfig":"27"},{"size":305,"mtime":1699471184537,"results":"44","hashOfConfig":"27"},{"size":105,"mtime":1699471184541,"results":"45","hashOfConfig":"27"},{"size":597,"mtime":1699471184452,"results":"46","hashOfConfig":"27"},{"size":13554,"mtime":1699921815953,"results":"47","hashOfConfig":"27"},{"size":38121,"mtime":1699895470569,"results":"48","hashOfConfig":"27"},{"size":8251,"mtime":1699889112765,"results":"49","hashOfConfig":"27"},{"size":714,"mtime":1699471184537,"results":"50","hashOfConfig":"27"},{"size":41977,"mtime":1699895898740,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"14zfh1r",{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/About/About.js",["130"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Navbar/Navbar.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Accordion/Accordion.js",["131","132","133"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Faq/Faq.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Footer/Footer.js",["134"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/DirectAirCapture/DirectAirCapture.js",["135"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Data/Data.js",["136","137","138"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Reforestation/Reforestation.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/HomeBodyIntro/HomeBodyIntro.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/OptimizationToolBlurb/OptimizationToolBlurb.js",["139","140","141"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/NoPage/NoPage.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Articles/Articles.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Dropdown/Dropdown.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/index.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/reportWebVitals.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/App.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Home/Home.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Layout/Layout.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Tools/Tools.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ArticleLink/ArticleLink.js",["142","143","144"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/MoreInfo/MoreInfo.js",["145"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/DACMap/DACMap.js",["146","147","148"],[],"import \"../ReforestationMap/ReforestationMap.css\"\nimport React, {useState, useEffect, useRef} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport loadingSpinner from '../../assets/loading.gif';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport {Link} from \"react-router-dom\";\n\n\nfunction DACMap(props) {\n\n    const mapContainer = useRef(null);\n    const [map, setMap] = useState(null);\n    const zoomThreshold = 3;\n    const [legendDisplay] = useState(\"block\");\n    const [isLoading, setIsLoading] = useState(false); // New loading state\n\n    useEffect(() => {\n        mapboxgl.accessToken =\n            \"pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA\";\n\n\n        const initializeMap = ({setMap, mapContainer}) => {\n\n\n            if (mapContainer && !mapContainer.current.classList.contains('mapboxgl-map')) {\n                const newMap = new mapboxgl.Map({\n                    container: mapContainer.current,\n                    style: \"mapbox://styles/mapbox/light-v11\",\n                    center: [-98, 38.88],\n                    minZoom: 1,\n                    zoom: 2.2,\n                });\n                const geocoder = new MapboxGeocoder({\n                    accessToken: mapboxgl.accessToken,\n                    mapboxgl: mapboxgl,\n                });\n                newMap.addControl(geocoder);\n                newMap.on(\"load\", () => {\n                    setMap(newMap);\n                    newMap.resize();\n\n                });\n            }\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [map]);\n    useEffect(() => {\n            if (map) {\n\n                if (map.getSource(\"state\")) {\n                    // If it does, update its data\n                    map.getSource(\"state\").setData(\"http://34.31.102.35/dacstategeojson.geojson\");\n\n                }\n                if (map.getSource(\"county\")) {\n                    // If it does, update its data\n                    map.getSource(\"county\").setData(\"http://34.31.102.35/daccountygeojson.geojson\");\n                }\n                if (!map.getSource(\"state\")) {\n                    map.addSource(\"state\", {\n                        type: \"geojson\",\n                        data: \"http://34.31.102.35/dacstategeojson.geojson\",\n                        promoteId: \"NAME\",\n                    });\n\n                    map.addLayer({\n                        id: \"state-data\",\n                        source: \"state\",\n                        // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n                        maxzoom: zoomThreshold,\n                        type: \"fill\",\n                        filter: [\"==\", \"isState\", \"yes\"],\n                        paint: {\n                            \"fill-color\": [\n                                \"case\",\n                                [\"boolean\", [\"feature-state\", \"hover\"], false],\n                                \"#ffe37a\", // Color to use when the condition is true (clicked)\n                                [\"boolean\", [\"feature-state\", \"click\"], false],\n                                \"#ffe37a\", // Color to use when the condition is true (clicked)\n                                [\n                                    \"interpolate\",\n                                    [\"linear\"],\n                                    [\"get\", \"class\"],\n                                    0,\n                                    props.colors.color0,\n                                    1,\n                                    props.colors.color1,\n                                    2,\n                                    props.colors.color2,\n                                    3,\n                                    props.colors.color3,\n                                    4,\n                                    props.colors.color4,\n                                    5,\n                                    props.colors.color5,\n                                    6,\n                                    props.colors.color6,\n                                    7,\n                                    props.colors.color7,\n                                ],\n                            ],\n                            \"fill-opacity\": 0.85,\n                        },\n                    });\n\n\n                    // define boundary lines for states so that\n                    // divisions are always obvious regardless of zoom\n                    map.addLayer({\n                        id: \"state-boundaries\",\n                        source: \"state\",\n                        type: \"line\",\n                        paint: {\n                            \"line-color\": \"#000\",\n                            \"line-width\": 0.1,\n                        },\n                    });\n\n                    //             // define boundary lines for counties so that\n                    //             // divisions are always obvious regardless of zoom\n                    // map.addLayer({\n                    // id: 'county-boundaries',\n                    // source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',\n                    // type: 'line',\n                    // paint: {\n                    //     'line-color': '#000',\n                    //     'line-width': .1\n                    // }\n                    // });\n                }\n                if (!map.getSource(\"county\")) {\n                    setIsLoading(true);\n\n                    map.addSource(\"county\", {\n                        type: \"geojson\",\n                        data: \"http://34.31.102.35/daccountygeojson.geojson\",\n                        promoteId: \"GEO_ID\",\n                    });\n                    map.addLayer({\n                        id: 'county-data',\n                        source: 'county',\n                        // 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n                        minzoom: zoomThreshold,\n                        type: 'fill',\n                        filter: ['==', 'isState', \"no\"],\n                        paint: {\n                            'fill-color': [\n                                'case',\n                                ['boolean', ['feature-state', 'hover'], false],\n                                '#ffe37a', // Color to use when the condition is true (clicked)\n                                ['boolean', ['feature-state', 'click'], false],\n                                '#ffe37a', // Color to use when the condition is true (clicked)\n                                [\n                                    'interpolate',\n                                    ['linear'],\n                                    ['get', 'class'],\n                                    0,\n                                    props.colors.color0,\n                                    1,\n                                    props.colors.color1,\n                                    2,\n                                    props.colors.color2,\n                                    3,\n                                    props.colors.color3,\n                                    4,\n                                    props.colors.color4,\n                                    5,\n                                    props.colors.color5,\n                                    6,\n                                    props.colors.color6,\n                                    7,\n                                    props.colors.color7\n                                ] // Default color based on the 'class' property\n                            ],\n                            'fill-opacity': .85,\n                        },\n                    });\n                    map.addLayer({\n                        id: 'county-boundaries',\n                        source: 'county',\n                        // 'source-layer': 'countyReforestation-dszxt3',\n                        type: 'line',\n                        minzoom: zoomThreshold,\n                        paint: {\n                            'line-color': '#000',\n                            'line-width': .1,\n                            'line-opacity': 0.5\n                        }\n                    });\n                }\n\n                let stateHoveredPolygonId = null;\n                let stateClickedPolygonId = null;\n                let countyHoveredPolygonId = null;\n                let countyClickedPolygonId = null;\n                map.getCanvas().style.cursor = \"pointer\";\n                map.once('idle', () => {\n                    setIsLoading(false)\n                });\n\n                if (map.getLayer('state-data')) {\n\n\n                    map.on(\"mousemove\", \"state-data\", (e) => {\n                        // console.log(\"hovering\")\n                        const properties = e.features[0].properties;\n\n                        // the current features properties\n                        const countyName = properties[\"NAME\"];\n                        if (stateHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: \"state\", id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature to 'click'\n                        stateHoveredPolygonId = e.features[0].id;\n                        if (stateHoveredPolygonId !== null) {\n                            console.log(stateHoveredPolygonId)\n                        }\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: true}\n                        );\n                    });\n                    map.on(\"click\", \"state-data\", (e) => {\n\n                        // useEffect(() => {\n\n\n                        //     // map.on('load', () => {\n                        //     //     map.addSource('population', {\n                        //     //         type: 'vector',\n                        //     //         url: 'mapbox://mapbox.660ui7x6',\n                        //     //     });\n\n                        //     //     map.addLayer({\n                        //     //         id: 'state-population',\n                        //     //         source: 'population',\n                        //     //         'source-layer': 'state_county_population_2014_cen',\n                        //     //         maxzoom: zoomThreshold,\n                        //     //         type: 'fill',\n                        //     //         filter: ['==', 'isState', true],\n                        //     //         paint: {\n                        //     //             'fill-color': [\n                        //     //                 'interpolate',\n                        //     //                 ['linear'],\n                        //     //                 ['get', 'population'],\n                        //     //                 1000,\n                        //     //                 props.colors.color1,\n                        //     //                 5000,\n                        //     //                 props.colors.color2,\n                        //     //                 10000,\n                        //     //                 props.colors.color3,\n                        //     //                 50000,\n                        //     //                 props.colors.color4,\n                        //     //                 100000,\n                        //     //                 props.colors.color5,\n                        //     //                 500000,\n                        //     //                 props.colors.color6,\n                        //     //                 1000000,\n                        //     //                 props.colors.color7,\n                        //     //             ],\n                        //     //             'fill-opacity': .85,\n                        //     //         },\n                        //     //     });\n\n                        //     //     map.addLayer({\n                        //     //         id: 'county-population',\n                        //     //         source: 'population',\n                        //     //         'source-layer': 'state_county_population_2014_cen',\n                        //     //         minzoom: zoomThreshold,\n                        //     //         type: 'fill',\n                        //     //         filter: ['==', 'isCounty', true],\n                        //     //         paint: {\n                        //     //             'fill-color': [\n                        //     //                 'interpolate',\n                        //     //                 ['linear'],\n                        //     //                 ['get', 'population'],\n                        //     //                 1000,\n                        //     //                 props.colors.color1,\n                        //     //                 5000,\n                        //     //                 props.colors.color2,\n                        //     //                 10000,\n                        //     //                 props.colors.color3,\n                        //     //                 50000,\n                        //     //                 props.colors.color4,\n                        //     //                 100000,\n                        //     //                 props.colors.color5,\n                        //     //                 500000,\n                        //     //                 props.colors.color6,\n                        //     //                 1000000,\n                        //     //                 props.colors.color7,\n                        //     //             ],\n                        //     //             'fill-opacity': .85,\n                        //     //         },\n                        //     //     });\n                        //     // });\n\n                        //     map.on('load', () => {\n                        //         // state data vector tileset\n                        //         map.addSource('state', {\n                        //             type: 'vector',\n                        //             url: \"mapbox://jholsch29.4gfqi3ew\",\n                        //             \"promoteId\": {\"stateDAC-1m13bh\": \"NAME\"},\n                        //             //\n                        //             // type: 'geojson',\n                        //             // data: \"https://cdn.rawgit.com/ebrelsford/geojson-examples/master/596acres-02-18-2014-queens.geojson\"\n                        //             //\n                        //         });\n\n                        //         // county data vector tileset\n                        //         map.addSource('county', {\n                        //             type: 'geojson',\n                        //             data: \"127.0.0.1:5000/daccountygeojson.geojson\",\n                        //             \"promoteId\": \"GEO_ID\",\n                        //         });\n\n                        //         // add choropleth layer for state level\n                        //         map.addLayer({\n                        //             id: 'state-data',\n                        //             source: 'state',\n                        //             // 'source-layer': 'stateDAC-1m13bh',  // vector tileset name\n                        //             maxzoom: zoomThreshold,\n                        //             type: 'fill',\n                        //             filter: ['==', 'isState', \"yes\"],\n                        //             paint: {\n                        //                 'fill-color': [\n                        //                     'case',\n                        //                     ['boolean', ['feature-state', 'hover'], false],\n                        //                     '#ffe37a', // Color to use when the condition is true (clicked)\n                        //                     ['boolean', ['feature-state', 'click'], false],\n                        //                     '#ffe37a', // Color to use when the condition is true (clicked)\n                        //                     [\n                        //                         'interpolate',\n                        //                         ['linear'],\n                        //                         ['get', 'class'],\n                        //                         0,\n                        //                         props.colors.color0,\n                        //                         1,\n                        //                         props.colors.color1,\n                        //                         2,\n                        //                         props.colors.color2,\n                        //                         3,\n                        //                         props.colors.color3,\n                        //                         4,\n                        //                         props.colors.color4,\n                        //                         5,\n                        //                         props.colors.color5,\n                        //                         6,\n                        //                         props.colors.color6,\n                        //                         7,\n                        //                         props.colors.color7\n                        //                     ]\n                        //                 ],\n                        //                 'fill-opacity': .85\n                        //             },\n\n                        //             //'fill-opacity': .85,\n                        //             // 'id': 'population',\n                        //             // 'type': 'circle',\n                        //             // source: 'state',\n                        //             // 'paint': {\n                        //             //     'circle-radius': {\n                        //             //         'base': 1.75,\n                        //             //         'stops': [[12, 2], [22, 180]]\n                        //             //     },\n                        //             // 'circle-color': '#f00'\n\n                        //             // }\n                        //             //\n                        //         });\n\n                        //         map.addLayer({\n                        //             id: 'county-data',\n                        //             source: 'county',\n                        //             // 'source-layer': 'countyDAC-68q8mt',  // vector tileset name\n                        //             minzoom: zoomThreshold,\n                        //             type: 'fill',\n                        //             filter: ['==', 'isState', \"no\"],\n                        //             paint: {\n                        //                 'fill-color': [\n                        //                     'case',\n                        //                     ['boolean', ['feature-state', 'hover'], false],\n                        //                     '#ffe37a', // Color to use when the condition is true (clicked)\n                        //                     ['boolean', ['feature-state', 'click'], false],\n                        //                     '#ffe37a', // Color to use when the condition is true (clicked)\n                        //                     [\n                        //                         'interpolate',\n                        //                         ['linear'],\n                        //                         ['get', 'class'],\n                        //                         0,\n                        //                         props.colors.color0,\n                        //                         1,\n                        //                         props.colors.color1,\n                        //                         2,\n                        //                         props.colors.color2,\n                        //                         3,\n                        //                         props.colors.color3,\n                        //                         4,\n                        //                         props.colors.color4,\n                        //                         5,\n                        //                         props.colors.color5,\n                        //                         6,\n                        //                         props.colors.color6,\n                        //                         7,\n                        //                         props.colors.color7\n                        //                     ]\n                        //                 ],\n                        //                 'fill-opacity': .85,\n                        //             },\n                        //         });\n\n                        //         // define boundary lines for states so that\n                        //         // divisions are always obvious regardless of zoom\n                        //         map.addLayer({\n                        //             id: 'state-boundaries',\n                        //             source: 'state',\n                        //             // 'source-layer': 'stateDAC-1m13bh',\n                        //             type: 'line',\n                        //             paint: {\n                        //                 'line-color': '#000',\n                        //                 'line-width': 0.05\n                        //             }\n                        //         });\n\n                        //         // define boundary lines for counties so that\n                        //         // divisions are always obvious regardless of zoom\n                        //         map.addLayer({\n                        //             id: 'county-boundaries',\n                        //             source: 'county',\n                        //             // 'source-layer': 'countyDAC-68q8mt',\n                        //             type: 'line',\n                        //             paint: {\n                        //                 'line-color': '#000',\n                        //                 'line-width': 0.1,\n                        //                 'line-opacity': 0.5\n                        //             }\n                        //         });\n                        //     });\n                        //     let stateHoveredPolygonId = null;\n                        //     let stateClickedPolygonId = null;\n                        //     let countyHoveredPolygonId = null;\n                        //     let countyClickedPolygonId = null;\n                        //     // When the map is clicked display a popup\n                        //     map.on('click', 'state-data', (e) => {\n                                                //Function to format percent\n                        function formatPercent(value) {\n                            value = value * 100;\n                            return value.toFixed(0) + '%';\n                        }\n\n                        // Function to add commas as thousands separators\n                        function addCommas(value) {\n                            return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        }\n\n                        function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                        // the span elements used in the sidebar\n                        const nameDisplay = document.getElementById('name');\n                        const costDisplay = document.getElementById('cost');\n                        const elecDisplay = document.getElementById('elec');\n                        const elevDisplay = document.getElementById('elev');\n                        const popDisplay = document.getElementById('pop');\n                        const preDisplay = document.getElementById('pre');\n                        const tempDisplay = document.getElementById('temp');\n\n                        // the properties of the feature\n                        const properties = e.features[0].properties;\n\n\n                        // the current features properties\n                        const stateName = properties['NAME'];\n                        const stateCost = properties['cost'];\n                        const stateElec = properties['electric'];\n                        const stateElev = properties['elevation'];\n                        const statePop = properties['population'];\n                        const statePre = properties['precipitation'];\n                        const stateTemp = properties['temperature'];\n\n                        if (isNaN(stateCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(stateCost);\n                        }\n                        if (isNaN(stateElec)){\n                            elecDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elecDisplay.textContent = addCommas(stateElec);\n                        }\n                        if (isNaN(stateElev)){\n                            elevDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elevDisplay.textContent = addCommas(stateElev);\n                        }\n                        if (isNaN(statePop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(statePop);\n                        }\n                        if (isNaN(statePre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(statePre);\n                        }\n                        if (isNaN(stateTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(stateTemp);\n                        }\n\n                        //display the property values\n                        nameDisplay.textContent = stateName;\n\n\n                        if (stateClickedPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: 'state', id: stateClickedPolygonId},\n                                {click: false}\n                            );\n                        }\n                        // Set the state of the clicked feature to 'click'\n                        stateClickedPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'state', id: stateClickedPolygonId},\n                            {click: true}\n                        );\n\n                    });\n\n                    map.on('mousemove', 'state-data', (e) => {\n\n                        if (stateHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: 'state', id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature to 'click'\n                        stateHoveredPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'state', id: stateHoveredPolygonId},\n                            {hover: true}\n                        );\n\n                    });\n\n\n                    map.on('mouseleave', 'state-data', () => {\n                        if (stateHoveredPolygonId !== null) {\n                            map.setFeatureState(\n                                {source: 'state', id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n                        stateHoveredPolygonId = null;\n                    });\n\n                    map.on('mousemove', 'county-data', (e) => {\n                        if (countyHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature in the 'county-data' layer\n                            map.setFeatureState(\n                                {source: 'county', id: countyHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n                        countyHoveredPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: true}\n                        );\n                    });\n                    map.on('mouseleave', 'county-data', () => {\n                        if (countyHoveredPolygonId !== null) {\n                            map.setFeatureState(\n                                {source: 'county', id: countyHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n                        countyHoveredPolygonId = null;\n                    });\n                    // When the map is clicked display a popup\n                    map.on('click', 'county-data', (e) => {\n                        //Function to format percent\n                        function formatPercent(value) {\n                            value = value * 100;\n                            return value.toFixed(0) + '%';\n                        }\n\n                        // Function to add commas as thousands separators\n                        function addCommas(value) {\n                            return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        }\n\n                        function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                        // the span elements used in the sidebar\n                        const nameDisplay = document.getElementById('name');\n                        const costDisplay = document.getElementById('cost');\n                        const elecDisplay = document.getElementById('elec');\n                        const elevDisplay = document.getElementById('elev');\n                        const popDisplay = document.getElementById('pop');\n                        const preDisplay = document.getElementById('pre');\n                        const tempDisplay = document.getElementById('temp');\n\n                        // the properties of the feature\n                        const properties = e.features[0].properties;\n\n                        console.log(e.features)\n\n                        // the current features properties\n                        const countyName = properties['NAME'];\n                        const countyCost = parseFloat(properties['cost']);\n                        const countyElec = parseFloat(properties['electric']);\n                        const countyElev = parseFloat(properties['elevation']);\n                        const countyPop = parseFloat(properties['population']);\n                        const countyPre = parseFloat(properties['precipitation']);\n                        const countyTemp = parseFloat(properties['temperature']);\n\n                        if (isNaN(countyCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(countyCost);\n                        }\n                        if (isNaN(countyElec)){\n                            elecDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elecDisplay.textContent = addCommas(countyElec);\n                        }\n                        if (isNaN(countyElev)){\n                            elevDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elevDisplay.textContent = addCommas(countyElev);\n                        }\n                        if (isNaN(countyPop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(countyPop);\n                        }\n                        if (isNaN(countyPre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(countyPre);\n                        }\n                        if (isNaN(countyTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(countyTemp);\n                        }\n\n\n\n                        nameDisplay.textContent = countyName;\n\n                        if (countyClickedPolygonId !== null) {\n                            // Reset the state of the previously clicked feature in the 'county-data' layer\n                            map.setFeatureState(\n                                {source: 'county', id: countyClickedPolygonId},\n                                {click: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature in the 'county-data' layer to 'click'\n                        countyClickedPolygonId = e.features[0].id;\n\n                        map.setFeatureState(\n                            {source: 'county', id: countyClickedPolygonId},\n                            {click: true}\n                        );\n\n\n                    });\n\n\n                    map.on('mouseenter', 'county-data', () => {\n                        map.getCanvas().style.cursor = 'pointer';\n                    });\n\n                    map.on('mouseleave', 'county-data', () => {\n                        map.getCanvas().style.cursor = '';\n                    });\n\n                }\n            }\n        }\n\n        , [map, \"http://34.31.102.35/dacstategeojson.geojson\"]);\n\n    return (\n        <div className=\"map-container-wrapper\">\n            {isLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-content\">\n                        <img src={loadingSpinner} alt=\"Loading...\"/>\n                        <span className=\"loading-text\">Loading AI Model</span>\n                    </div>\n                </div>\n            )}\n            <div ref={mapContainer} className=\"map-container\">\n\n                <div className='info-section'>\n                    <div className='state-name'><span id='name'> Select a State or County </span></div>\n                    <hr className='name-line'/>\n                    <div><strong>Cost Efficiency:</strong> <span id='cost'></span></div>\n                    <div><strong>Electric:</strong> <span id='elec'></span></div>\n                    <div><strong>Elevation in Feet:</strong> <span id='elev'></span></div>\n                    <div><strong>Population:</strong> <span id='pop'></span></div>\n                    <div><strong>Precipitation:</strong> <span id='pre'></span></div>\n                    <div><strong>Temperature:</strong> <span id='temp'></span></div>\n                    <Link to=\"/moreinfo\">More Info</Link>\n                </div>\n\n\n                {/*\n            <div className=\"map-overlay top\" style={{display: dropdownDisplay}}>\n                <div className=\"map-overlay-inner\">\n                    <fieldset>\n                        <label>Chose Criteria</label>\n                        <select id=\"layer\" name=\"layer\">\n                            <option value=\"population\">Population</option>\n                            <option value=\"landPrices\">Land Prices</option>\n                            <option value=\"precipitation\">Precipitation</option>\n                        </select>\n                    </fieldset>\n                </div>\n            </div>\n           */}\n                <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n                    <h3>Cost Efficiency</h3>\n                    <h4>Most Efficient</h4>\n                    <div><span className=\"b723122\" style={{backgroundColor: props.colors.color7}}></span></div>\n                    <div><span className=\"b8b4225\" style={{backgroundColor: props.colors.color6}}></span></div>\n                    <div><span className=\"ba25626\" style={{backgroundColor: props.colors.color5}}></span></div>\n                    <div><span className=\"bb86b25\" style={{backgroundColor: props.colors.color4}}></span></div>\n                    <div><span className=\"bca8323\" style={{backgroundColor: props.colors.color3}}></span></div>\n                    <div><span className=\"bda9c20\" style={{backgroundColor: props.colors.color2}}></span></div>\n                    <div><span className=\"be6b71e\" style={{backgroundColor: props.colors.color1}}></span></div>\n                    <h4>Least Efficient</h4>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default DACMap;",[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/KelpMap/KelpMap.js",["149","150"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/KelpFarms/KelpFarms.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ReforestationMap/ReforestationMap.js",["151","152","153"],[],"import \"./ReforestationMap.css\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport loadingSpinner from '../../assets/loading.gif';\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction ChoroplethMap(props) {\n    const mapContainer = useRef(null);\n    const [map, setMap] = useState(null);\n    const zoomThreshold = 3;\n    const [legendDisplay] = useState(\"block\");\n    const [isLoading, setIsLoading] = useState(false); // New loading state\n\n    // Initialize the map\n    useEffect(() => {\n        mapboxgl.accessToken =\n            \"pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA\";\n\n\n        const initializeMap = ({setMap, mapContainer}) => {\n\n\n            if (mapContainer && !mapContainer.current.classList.contains('mapboxgl-map')) {\n                const newMap = new mapboxgl.Map({\n                    container: mapContainer.current,\n                    style: \"mapbox://styles/mapbox/light-v11\",\n                    center: [-98, 38.88],\n                    minZoom: 1,\n                    zoom: 2.2,\n                });\n                const geocoder = new MapboxGeocoder({\n                    accessToken: mapboxgl.accessToken,\n                    mapboxgl: mapboxgl,\n                });\n                newMap.addControl(geocoder);\n                newMap.on(\"load\", () => {\n                    setMap(newMap);\n                    newMap.resize();\n\n                });\n            }\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [map]);\n\n\n    // Load GeoJSON into the map\n    useEffect(() => {\n        if (map) {\n\n            if (map.getSource(\"state\")) {\n                // If it does, update its data\n                map.getSource(\"state\").setData(\"http://34.31.102.35/forestationstategeojson.geojson\");\n\n            }\n            if (map.getSource(\"county\")) {\n                // If it does, update its data\n                map.getSource(\"county\").setData(\"http://34.31.102.35/forestationcountygeojson.geojson\");\n            }\n            if (!map.getSource(\"state\")) {\n                map.addSource(\"state\", {\n                    type: \"geojson\",\n                    data: \"http://34.31.102.35/forestationstategeojson.geojson\",\n                    promoteId: \"NAME\",\n                });\n\n                map.addLayer({\n                    id: \"state-data\",\n                    source: \"state\",\n                    // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n                    maxzoom: zoomThreshold,\n                    type: \"fill\",\n                    filter: [\"==\", \"isState\", \"yes\"],\n                    paint: {\n                        \"fill-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            \"#ffe37a\", // Color to use when the condition is true (clicked)\n                            [\"boolean\", [\"feature-state\", \"click\"], false],\n                            \"#ffe37a\", // Color to use when the condition is true (clicked)\n                            [\n                                \"interpolate\",\n                                [\"linear\"],\n                                [\"get\", \"class\"],\n                                0,\n                                props.colors.color0,\n                                1,\n                                props.colors.color1,\n                                2,\n                                props.colors.color2,\n                                3,\n                                props.colors.color3,\n                                4,\n                                props.colors.color4,\n                                5,\n                                props.colors.color5,\n                                6,\n                                props.colors.color6,\n                                7,\n                                props.colors.color7,\n                            ],\n                        ],\n                        \"fill-opacity\": 0.85,\n                    },\n                });\n\n\n                // define boundary lines for states so that\n                // divisions are always obvious regardless of zoom\n                map.addLayer({\n                    id: \"state-boundaries\",\n                    source: \"state\",\n                    type: \"line\",\n                    paint: {\n                        \"line-color\": \"#000\",\n                        \"line-width\": 0.1,\n                    },\n                });\n\n                //             // define boundary lines for counties so that\n                //             // divisions are always obvious regardless of zoom\n                // map.addLayer({\n                // id: 'county-boundaries',\n                // source: 'county',\n                // 'source-layer': 'countyReforestation-dszxt3',\n                // type: 'line',\n                // paint: {\n                //     'line-color': '#000',\n                //     'line-width': .1\n                // }\n                // });\n            }\n            if (!map.getSource(\"county\")) {\n                setIsLoading(true);\n\n                map.addSource(\"county\", {\n                    type: \"geojson\",\n                    data: \"http://34.31.102.35/forestationcountygeojson.geojson\",\n                    promoteId: \"GEO_ID\",\n                });\n                map.addLayer({\n                    id: 'county-data',\n                    source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n                    minzoom: zoomThreshold,\n                    type: 'fill',\n                    filter: ['==', 'isState', \"no\"],\n                    paint: {\n                        'fill-color': [\n                            'case',\n                            ['boolean', ['feature-state', 'hover'], false],\n                            '#ffe37a', // Color to use when the condition is true (clicked)\n                            ['boolean', ['feature-state', 'click'], false],\n                            '#ffe37a', // Color to use when the condition is true (clicked)\n                            [\n                                'interpolate',\n                                ['linear'],\n                                ['get', 'class'],\n                                0,\n                                props.colors.color0,\n                                1,\n                                props.colors.color1,\n                                2,\n                                props.colors.color2,\n                                3,\n                                props.colors.color3,\n                                4,\n                                props.colors.color4,\n                                5,\n                                props.colors.color5,\n                                6,\n                                props.colors.color6,\n                                7,\n                                props.colors.color7\n                            ] // Default color based on the 'class' property\n                        ],\n                        'fill-opacity': .85,\n                    },\n                });\n                map.addLayer({\n                    id: 'county-boundaries',\n                    source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',\n                    type: 'line',\n                    minzoom: zoomThreshold,\n                    paint: {\n                        'line-color': '#000',\n                        'line-width': .1,\n                        'line-opacity': 0.5\n                    }\n                });\n            }\n\n            // });\n\n\n            let stateHoveredPolygonId = null;\n            let stateClickedPolygonId = null;\n            let countyHoveredPolygonId = null;\n            let countyClickedPolygonId = null;\n            map.getCanvas().style.cursor = \"pointer\";\n            map.once('idle', () => {\n                setIsLoading(false)\n            });\n\n            if (map.getLayer('state-data')) {\n\n\n                map.on(\"mousemove\", \"state-data\", (e) => {\n                    // console.log(\"hovering\")\n                    const properties = e.features[0].properties;\n\n                    // the current features properties\n                    const countyName = properties[\"NAME\"];\n                    if (stateHoveredPolygonId !== null) {\n                        // Reset the state of the previously clicked feature\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n\n                    // Set the state of the clicked feature to 'click'\n                    stateHoveredPolygonId = e.features[0].id;\n                    if (stateHoveredPolygonId !== null) {\n                        console.log(stateHoveredPolygonId)\n                    }\n                    map.setFeatureState(\n                        {source: \"state\", id: stateHoveredPolygonId},\n                        {hover: true}\n                    );\n                });\n\n                // When the map is clicked display a popup\n\n                map.on(\"click\", \"state-data\", (e) => {\n                    function formatCurrency(value) {\n                        return (\n                            \"$\" + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n                        );\n                    }\n\n                    //Function to format percent\n                    function formatPercent(value) {\n                        value = value * 100;\n                        return value.toFixed(0) + \"%\";\n                    }\n\n                    // Function to add commas as thousands separators\n                    function addCommas(value) {\n                        return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n                    }\n                    function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n\n                    // Commented out code that was used when we had the dropdown option\n                    //let dropdown = document.getElementById(\"dropdown\");\n                    //let title = dropdown.options[dropdown.selectedIndex].text\n                    //title + \": \" + e.features[0].properties[dropdown.value]\n                    // Get the feature's properties\n                    //The features at the coordinate that was picked\n\n                    // the span elements used in the sidebar\n                    const nameDisplay = document.getElementById(\"name\");\n                    const costDisplay = document.getElementById(\"cost\");\n                    const landDisplay = document.getElementById(\"land\");\n                    const zDisplay = document.getElementById(\"z\");\n                    const popDisplay = document.getElementById(\"pop\");\n                    const preDisplay = document.getElementById(\"pre\");\n                    const tempDisplay = document.getElementById(\"temp\");\n\n\n                    // the properties of the feature\n                    const properties = e.features[0].properties;\n\n                    // the current features properties\n                    const stateName = properties[\"NAME\"];\n                    const stateCost = parseFloat(properties[\"cost\"]);\n                    const stateLand = parseFloat(properties[\"land\"]);\n                    const stateZ = parseFloat(properties[\"palmer\"]);\n                    const statePop = parseFloat(properties[\"population\"]);\n                    const statePre = parseFloat(properties[\"precipitation\"]);\n                    const stateTemp = parseFloat(properties[\"temperature\"]);\n\n                     if (isNaN(stateCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(stateCost);\n                        }\n                        if (isNaN(stateLand)){\n                            landDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            landDisplay.textContent = formatCurrency(stateLand);\n                        }\n                        if (isNaN(stateZ)){\n                            zDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            zDisplay.textContent = stateZ.toFixed(2);\n                        }\n                        if (isNaN(statePop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(statePop);\n                        }\n                        if (isNaN(statePre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(statePre);\n                        }\n                        if (isNaN(stateTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(stateTemp);\n                        }\n\n                    // Function to format currency with dollar sign and commas\n                    // Display the property values\n                    nameDisplay.textContent = stateName;\n\n                    if (stateClickedPolygonId !== null) {\n                        // Reset the state of the previously clicked feature\n                        map.setFeatureState(\n                            {source: \"state\", id: stateClickedPolygonId},\n                            {click: false}\n                        );\n                    }\n\n                    // Set the state of the clicked feature to 'click'\n                    stateClickedPolygonId = e.features[0].id;\n                    if (stateClickedPolygonId !== null) {\n                        console.log(stateClickedPolygonId);\n                    }\n                    map.setFeatureState(\n                        {source: \"state\", id: stateClickedPolygonId},\n                        {click: true}\n                    );\n\n                });\n\n\n                map.on(\"mouseleave\", \"state-data\", () => {\n                    map.getCanvas().style.cursor = '';\n\n                    if (stateHoveredPolygonId !== null) {\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n                    stateHoveredPolygonId = null;\n\n                    map.getCanvas().style.cursor = '';\n                });\n\n\n                map.on('mousemove', 'county-data', (e) => {\n                    if (countyHoveredPolygonId !== null) {\n                        // Reset the state of the previously clicked feature in the 'county-data' layer\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n\n                    // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n                    countyHoveredPolygonId = e.features[0].id;\n                    map.setFeatureState(\n                        {source: 'county', id: countyHoveredPolygonId},\n                        {hover: true}\n                    );\n                });\n                map.on('mouseleave', 'county-data', () => {\n                    if (countyHoveredPolygonId !== null) {\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n                    countyHoveredPolygonId = null;\n                });\n                // When the map is clicked display a popup\n                map.on('click', 'county-data', (e) => {\n\n                    // // Function to format currency with dollar sign and commas\n                    function formatCurrency(value) {\n                        return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                    }\n\n                    // //Function to format percent\n                    function formatPercent(value) {\n                        value = value * 100;\n                        return value.toFixed(0) + '%';\n                    }\n\n                    // Function to add commas as thousands separators\n                    function addCommas(value) {\n                        return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                    }\n                    function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                    // // the span elements used in the sidebar\n                    const nameDisplay = document.getElementById('name');\n                    const costDisplay = document.getElementById('cost');\n                    const landDisplay = document.getElementById('land');\n                    const zDisplay = document.getElementById('z');\n                    const popDisplay = document.getElementById('pop');\n                    const preDisplay = document.getElementById('pre');\n                    const tempDisplay = document.getElementById('temp');\n\n                    // // the properties of the feature\n                    const properties = e.features[0].properties;\n\n                    // // the current features properties\n                    const countyName = properties['NAME'];\n                    const countyCost = parseFloat(properties['cost']);\n                    const countyLand = parseFloat(properties['land']);\n                    const countyZ = parseFloat(properties['palmer']);\n                    const countyPop = parseFloat(properties['population']);\n                    const countyPre = parseFloat(properties['precipitation']);\n                    const countyTemp = parseFloat(properties['temperature']);\n\n                    if (isNaN(countyCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(countyCost);\n                        }\n                        if (isNaN(countyLand)){\n                            landDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            landDisplay.textContent = formatCurrency(countyLand);\n                        }\n                        if (isNaN(countyZ)){\n                            zDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            zDisplay.textContent = countyZ.toFixed(2);\n                        }\n                        if (isNaN(countyPop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(countyPop);\n                        }\n                        if (isNaN(countyPre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(countyPre);\n                        }\n                        if (isNaN(countyTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(countyTemp);\n                        }\n\n\n\n\n                    // // Display the property values\n                    nameDisplay.textContent = countyName;\n\n                    map.setFeatureState(\n                        {source: 'county', id: countyClickedPolygonId},\n                        {click: false}\n                    );\n\n\n                    countyClickedPolygonId = e.features[0].id;\n\n                    map.setFeatureState(\n                        {source: 'county', id: countyClickedPolygonId},\n                        {click: true}\n                    );\n\n                });\n\n\n                map.on(\"mouseenter\", \"county-data\", () => {\n                    map.getCanvas().style.cursor = \"pointer\";\n                });\n\n                map.on(\"mouseleave\", \"county-data\", () => {\n                    map.getCanvas().style.cursor = \"\";\n                });\n\n            }\n        }\n    }, [map, \"http://34.31.102.35/forestationstategeojson.geojson\"]);\n\n    return (\n        <div className=\"map-container-wrapper\">\n            {isLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-content\">\n                        <img src={loadingSpinner} alt=\"Loading...\"/>\n                        <span className=\"loading-text\">Loading AI Model</span>\n                    </div>\n                </div>\n            )}\n            <div ref={mapContainer} className=\"map-container\">\n                <div className=\"info-section\">\n                    <div className=\"state-name\">\n                        <span id=\"name\"></span>\n                    </div>\n                    <hr className=\"name-line\"/>\n                    <div>\n                        <strong>Cost Efficiency:</strong> <span id=\"cost\"></span>\n                    </div>\n                    <div>\n                        <strong>Land prices:</strong> <span id=\"land\"></span>\n                    </div>\n                    <div>\n                        <strong>Palmer-z index:</strong> <span id=\"z\"></span>\n                    </div>\n                    <div>\n                        <strong>Population:</strong> <span id=\"pop\"></span>\n                    </div>\n                    <div>\n                        <strong>Precipitation:</strong> <span id=\"pre\"></span>\n                    </div>\n                    <div>\n                        <strong>Temperature:</strong> <span id=\"temp\"></span>\n                    </div>\n                    <Link to=\"/moreinfo\">More Info</Link>\n                </div>\n\n                <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n                    <h3>Relative Efficiency</h3>\n                    <h4>Most Efficient</h4>\n                    <div>\n          <span\n              className=\"b723122\"\n              style={{backgroundColor: props.colors.color7}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"b8b4225\"\n              style={{backgroundColor: props.colors.color6}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"ba25626\"\n              style={{backgroundColor: props.colors.color5}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bb86b25\"\n              style={{backgroundColor: props.colors.color4}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bca8323\"\n              style={{backgroundColor: props.colors.color3}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bda9c20\"\n              style={{backgroundColor: props.colors.color2}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"be6b71e\"\n              style={{backgroundColor: props.colors.color1}}\n          ></span>\n                    </div>\n                    <h4>Least Efficient</h4>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default ChoroplethMap;\n\n\n// function ChoroplethMap(props) {\n\n//     const mapContainer = useRef(null);\n//     const [legendDisplay] = useState('block');\n//     const zoomThreshold = 3;\n\n//     useEffect(() => {\n//         mapboxgl.accessToken = 'pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA';\n\n//         const map = new mapboxgl.Map({\n//             container: mapContainer.current,\n//             style: 'mapbox://styles/mapbox/light-v11',\n//             center: [-98, 38.88],\n//             minZoom: 2,\n//             zoom: 2.2,\n//         });\n//         // Add Geocoder which creates the search bar\n//         const geocoder = new MapboxGeocoder({\n//             accessToken: mapboxgl.accessToken,\n//             mapboxgl: mapboxgl,\n//         });\n\n//         // Add the search bar to the heatmap\n//         map.addControl(geocoder);\n\n//         map.on('load', () => {\n//             // state data vector tileset\n//             map.addSource('state', {\n//                 // type: 'vector',\n//                 // url: \"mapbox://jholsch29.6l4kskpb\",\n//                 // \"promoteId\": {\"stateReforestation-ad4r41\": \"NAME\"},\n\n//                 type: 'geojson',\n//                 data: \"http://34.42.91.15/hardcode.geojson\"\n\n//             });\n\n//             // county data vector tileset\n//             map.addSource('county', {\n//                 type: 'vector',\n//                 url: \"mapbox://jholsch29.7n25de6t\",\n//                 \"promoteId\": {\"countyReforestation-dszxt3\": \"GEO_ID\"},\n//             });\n\n//             // add choropleth layer for state level\n//             map.addLayer({\n//                 id: 'state-data',\n//                 source: 'state',\n//                 // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n//                 maxzoom: zoomThreshold,\n//                 type: 'fill',\n//                 filter: ['==', 'isState', \"yes\"],\n//                 paint: {\n//                     'fill-color': [\n//                         'case',\n//                         ['boolean', ['feature-state', 'hover'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         ['boolean', ['feature-state', 'click'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         [\n//                             'interpolate',\n//                             ['linear'],\n//                             ['get', 'class'],\n//                             0,\n//                             props.colors.color0,\n//                             1,\n//                             props.colors.color1,\n//                             2,\n//                             props.colors.color2,\n//                             3,\n//                             props.colors.color3,\n//                             4,\n//                             props.colors.color4,\n//                             5,\n//                             props.colors.color5,\n//                             6,\n//                             props.colors.color6,\n//                             7,\n//                             props.colors.color7\n//                         ]\n//                     ],\n//                     'fill-opacity': .85\n//                 },\n\n//             });\n\n//             map.addLayer({\n//                 id: 'county-data',\n//                 source: 'county',\n//                 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n//                 minzoom: zoomThreshold,\n//                 type: 'fill',\n//                 filter: ['==', 'isState', \"no\"],\n//                 paint: {\n//                     'fill-color': [\n//                         'case',\n//                         ['boolean', ['feature-state', 'hover'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         ['boolean', ['feature-state', 'click'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         [\n//                             'interpolate',\n//                             ['linear'],\n//                             ['get', 'class'],\n//                             0,\n//                             props.colors.color0,\n//                             1,\n//                             props.colors.color1,\n//                             2,\n//                             props.colors.color2,\n//                             3,\n//                             props.colors.color3,\n//                             4,\n//                             props.colors.color4,\n//                             5,\n//                             props.colors.color5,\n//                             6,\n//                             props.colors.color6,\n//                             7,\n//                             props.colors.color7\n//                         ] // Default color based on the 'class' property\n//                     ],\n//                     'fill-opacity': .85,\n//                 },\n//             });\n\n//             // define boundary lines for states so that\n//             // divisions are always obvious regardless of zoom\n//             map.addLayer({\n//                 id: 'state-boundaries',\n//                 source: 'state',\n//                 'source-layer': 'stateReforestation-ad4r41',\n//                 type: 'line',\n//                 paint: {\n//                     'line-color': '#000',\n//                     'line-width': .1\n//                 }\n//             });\n\n//             // define boundary lines for counties so that\n//             // divisions are always obvious regardless of zoom\n//             map.addLayer({\n//                 id: 'county-boundaries',\n//                 source: 'county',\n//                 'source-layer': 'countyReforestation-dszxt3',\n//                 type: 'line',\n//                 paint: {\n//                     'line-color': '#000',\n//                     'line-width': .1\n//                 }\n//             });\n\n//         });\n\n//         let stateHoveredPolygonId = null;\n//         let stateClickedPolygonId = null;\n//         let countyHoveredPolygonId = null;\n//         let countyClickedPolygonId = null;\n//         // When the map is clicked display a popup\n//         map.on('click', 'state-data', (e) => {\n//             // Commented out code that was used when we had the dropdown option\n//             //let dropdown = document.getElementById(\"dropdown\");\n//             //let title = dropdown.options[dropdown.selectedIndex].text\n//             //title + \": \" + e.features[0].properties[dropdown.value]\n//             // Get the feature's properties\n//             //The features at the coordinate that was picked\n\n//             // the span elements used in the sidebar\n//             const nameDisplay = document.getElementById('name');\n//             const costDisplay = document.getElementById('cost');\n//             const landDisplay = document.getElementById('land');\n//             const zDisplay = document.getElementById('z');\n//             const popDisplay = document.getElementById('pop');\n//             const preDisplay = document.getElementById('pre');\n//             const tempDisplay = document.getElementById('temp');\n\n//             // the properties of the feature\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const stateName = properties['NAME'];\n//             const stateCost = parseFloat(properties['cost']);\n//             const stateLand = parseFloat(properties['land']);\n//             const stateZ = parseFloat(properties['palmer']);\n//             const statePop = parseFloat(properties['population']);\n//             const statePre = parseFloat(properties['precipitation']);\n//             const stateTemp = parseFloat(properties['temperature']);\n\n//             // Function to format currency with dollar sign and commas\n//             function formatCurrency(value) {\n//                 return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             //Function to format percent\n//             function formatPercent(value) {\n//                 value = value * 100;\n//                 return value.toFixed(0) + '%';\n//             }\n\n//             // Function to add commas as thousands separators\n//             function addCommas(value) {\n//                 return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             // Display the property values\n//             nameDisplay.textContent = stateName;\n//             costDisplay.textContent = formatPercent(stateCost);\n//             landDisplay.textContent = formatCurrency(stateLand);\n//             zDisplay.textContent = stateZ.toFixed(2);\n//             popDisplay.textContent = addCommas(statePop);\n//             preDisplay.textContent = statePre.toFixed(2);\n//             tempDisplay.textContent = stateTemp.toFixed(2);\n\n//             if (stateClickedPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateClickedPolygonId},\n//                     {click: false}\n//                 );\n//             }\n//             // Set the state of the clicked feature to 'click'\n//             stateClickedPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateClickedPolygonId},\n//                 {click: true}\n//             );\n\n//         });\n\n//         map.on('mousemove', 'state-data', (e) => {\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const countyName = properties['NAME'];\n//             if (stateHoveredPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n\n//             // Set the state of the clicked feature to 'click'\n//             stateHoveredPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                 {hover: true}\n//             );\n\n//         });\n\n//         map.on('mouseleave', 'state-data', () => {\n//             if (stateHoveredPolygonId !== null) {\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n//             stateHoveredPolygonId = null;\n//         });\n\n//         map.on('mousemove', 'county-data', (e) => {\n//             if (countyHoveredPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature in the 'county-data' layer\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n\n//             // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n//             countyHoveredPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                 {hover: true}\n//             );\n//         });\n//         map.on('mouseleave', 'county-data', () => {\n//             if (countyHoveredPolygonId !== null) {\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n//             countyHoveredPolygonId = null;\n//         });\n//         // When the map is clicked display a popup\n//         map.on('click', 'county-data', (e) => {\n\n//             // the span elements used in the sidebar\n//             const nameDisplay = document.getElementById('name');\n//             const costDisplay = document.getElementById('cost');\n//             const landDisplay = document.getElementById('land');\n//             const zDisplay = document.getElementById('z');\n//             const popDisplay = document.getElementById('pop');\n//             const preDisplay = document.getElementById('pre');\n//             const tempDisplay = document.getElementById('temp');\n\n//             // the properties of the feature\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const countyName = properties['NAME'];\n//             const countyCost = parseFloat(properties['cost']);\n//             const countyLand = parseFloat(properties['land']);\n//             const countyZ = parseFloat(properties['palmer']);\n//             const countyPop = parseFloat(properties['population']);\n//             const countyPre = parseFloat(properties['precipitation']);\n//             const countyTemp = parseFloat(properties['temperature']);\n\n//             // Function to format currency with dollar sign and commas\n//             function formatCurrency(value) {\n//                 return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             //Function to format percent\n//             function formatPercent(value) {\n//                 value = value * 100;\n//                 return value.toFixed(0) + '%';\n//             }\n//             // Function to add commas as thousands separators\n//             function addCommas(value) {\n//                 return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             // Display the property values\n//             nameDisplay.textContent = countyName;\n//             costDisplay.textContent = formatPercent(countyCost);\n//             landDisplay.textContent = formatCurrency(countyLand);\n//             zDisplay.textContent = countyZ.toFixed(2);\n//             popDisplay.textContent = addCommas(countyPop);\n//             preDisplay.textContent = countyPre.toFixed(2);\n//             tempDisplay.textContent = countyTemp.toFixed(2);\n\n//             if (countyClickedPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature in the 'county-data' layer\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyClickedPolygonId},\n//                     {click: false}\n//                 );\n//             }\n\n//             // Set the state of the clicked feature in the 'county-data' layer to 'click'\n//             countyClickedPolygonId = e.features[0].id;\n\n//             map.setFeatureState(\n//                 {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyClickedPolygonId},\n//                 {click: true}\n//             );\n\n//         });\n\n//         map.on('mouseenter', 'county-data', () => {\n//             map.getCanvas().style.cursor = 'pointer';\n//         });\n\n//         map.on('mouseleave', 'county-data', () => {\n//             map.getCanvas().style.cursor = '';\n//         });\n\n//     }, []);\n\n//     return (\n\n//         <div ref={mapContainer} className=\"map-container\">\n//             <div className='info-section'>\n//                 <div className='state-name'><span id='name'></span></div>\n//                 <hr className='name-line'/>\n//                 <div><strong>Cost Efficiency:</strong> <span id='cost'></span></div>\n//                 <div><strong>Land prices:</strong> <span id='land'></span></div>\n//                 <div><strong>Palmer-z index:</strong> <span id='z'></span></div>\n//                 <div><strong>Population:</strong> <span id='pop'></span></div>\n//                 <div><strong>Precipitation:</strong> <span id='pre'></span></div>\n//                 <div><strong>Temperature:</strong> <span id='temp'></span></div>\n//                 <Link to=\"/moreinfo\">More Info</Link>\n//             </div>\n\n//             <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n//                 <h4>Cost Efficency</h4>\n//                 <h3>Most</h3>\n//                 <div><span className=\"b723122\" style={{backgroundColor: props.colors.color7}}></span></div>\n//                 <div><span className=\"b8b4225\" style={{backgroundColor: props.colors.color6}}></span></div>\n//                 <div><span className=\"ba25626\" style={{backgroundColor: props.colors.color5}}></span></div>\n//                 <div><span className=\"bb86b25\" style={{backgroundColor: props.colors.color4}}></span></div>\n//                 <div><span className=\"bca8323\" style={{backgroundColor: props.colors.color3}}></span></div>\n//                 <div><span className=\"bda9c20\" style={{backgroundColor: props.colors.color2}}></span></div>\n//                 <div><span className=\"be6b71e\" style={{backgroundColor: props.colors.color1}}></span></div>\n//                 <h3>Least</h3>\n//             </div>\n//         </div>\n\n//     );\n// }\n\n// export default ChoroplethMap;\n\n",{"ruleId":"154","severity":1,"message":"155","line":160,"column":12,"nodeType":"156","messageId":"157","endLine":160,"endColumn":68,"fix":"158"},{"ruleId":"159","severity":1,"message":"160","line":1,"column":8,"nodeType":"161","messageId":"162","endLine":1,"endColumn":14},{"ruleId":"159","severity":1,"message":"163","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":25},{"ruleId":"164","severity":1,"message":"165","line":43,"column":9,"nodeType":"156","endLine":49,"endColumn":11},{"ruleId":"154","severity":1,"message":"155","line":38,"column":46,"nodeType":"156","messageId":"157","endLine":38,"endColumn":107,"fix":"166"},{"ruleId":"159","severity":1,"message":"167","line":1,"column":8,"nodeType":"161","messageId":"162","endLine":1,"endColumn":15},{"ruleId":"168","severity":1,"message":"169","line":19,"column":12,"nodeType":"170","messageId":"171","endLine":22,"endColumn":92},{"ruleId":"168","severity":1,"message":"169","line":24,"column":12,"nodeType":"170","messageId":"171","endLine":26,"endColumn":98},{"ruleId":"154","severity":1,"message":"155","line":98,"column":5,"nodeType":"156","messageId":"157","endLine":98,"endColumn":42,"fix":"172"},{"ruleId":"164","severity":1,"message":"165","line":70,"column":13,"nodeType":"156","endLine":75,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":105,"column":13,"nodeType":"156","endLine":110,"endColumn":15},{"ruleId":"164","severity":1,"message":"165","line":142,"column":13,"nodeType":"156","endLine":147,"endColumn":15},{"ruleId":"154","severity":1,"message":"155","line":7,"column":9,"nodeType":"156","messageId":"157","endLine":7,"endColumn":71,"fix":"173"},{"ruleId":"164","severity":1,"message":"165","line":8,"column":11,"nodeType":"156","endLine":13,"endColumn":13},{"ruleId":"154","severity":1,"message":"155","line":17,"column":7,"nodeType":"156","messageId":"157","endLine":17,"endColumn":44,"fix":"174"},{"ruleId":"164","severity":1,"message":"165","line":42,"column":9,"nodeType":"156","endLine":48,"endColumn":11},{"ruleId":"159","severity":1,"message":"175","line":214,"column":31,"nodeType":"161","messageId":"162","endLine":214,"endColumn":41},{"ruleId":"176","severity":1,"message":"177","line":718,"column":11,"nodeType":"178","endLine":718,"endColumn":63,"suggestions":"179"},{"ruleId":"176","severity":1,"message":"180","line":718,"column":17,"nodeType":"170","endLine":718,"endColumn":62},{"ruleId":"159","severity":1,"message":"181","line":15,"column":11,"nodeType":"161","messageId":"162","endLine":15,"endColumn":24},{"ruleId":"176","severity":1,"message":"177","line":184,"column":8,"nodeType":"178","endLine":184,"endColumn":10,"suggestions":"182"},{"ruleId":"159","severity":1,"message":"175","line":220,"column":27,"nodeType":"161","messageId":"162","endLine":220,"endColumn":37},{"ruleId":"176","severity":1,"message":"177","line":509,"column":8,"nodeType":"178","endLine":509,"endColumn":68,"suggestions":"183"},{"ruleId":"176","severity":1,"message":"184","line":509,"column":14,"nodeType":"170","endLine":509,"endColumn":67},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"185","text":"186"},"no-unused-vars","'nReact' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"range":"187","text":"186"},"'Heatmap' is defined but never used.","no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString",{"range":"188","text":"186"},{"range":"189","text":"186"},{"range":"190","text":"186"},"'countyName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.colors.color0', 'props.colors.color1', 'props.colors.color2', 'props.colors.color3', 'props.colors.color4', 'props.colors.color5', 'props.colors.color6', and 'props.colors.color7'. Either include them or remove the dependency array.","ArrayExpression",["191"],"The \"http://34.31.102.35/dacstategeojson.geojson\" literal is not a valid dependency because it never changes. You can safely remove it.","'zoomThreshold' is assigned a value but never used.",["192"],["193"],"The \"http://34.31.102.35/forestationstategeojson.geojson\" literal is not a valid dependency because it never changes. You can safely remove it.",[5214,5214]," rel=\"noreferrer\"",[1789,1789],[3080,3080],[215,215],[458,458],{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"194","fix":"198"},"Update the dependencies array to be: [map, props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",{"range":"201","text":"202"},{"range":"203","text":"200"},[35052,35104],"[map, props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",[6565,6567],"[props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",[21156,21216]]