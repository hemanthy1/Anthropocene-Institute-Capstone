[{"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/About/About.js":"1","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Navbar/Navbar.js":"2","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Accordion/Accordion.js":"3","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Faq/Faq.js":"4","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Footer/Footer.js":"5","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/DirectAirCapture/DirectAirCapture.js":"6","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Data/Data.js":"7","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Reforestation/Reforestation.js":"8","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/HomeBodyIntro/HomeBodyIntro.js":"9","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/OptimizationToolBlurb/OptimizationToolBlurb.js":"10","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/NoPage/NoPage.js":"11","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Articles/Articles.js":"12","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Dropdown/Dropdown.js":"13","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/index.js":"14","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/reportWebVitals.js":"15","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/App.js":"16","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Home/Home.js":"17","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Layout/Layout.js":"18","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Tools/Tools.js":"19","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ArticleLink/ArticleLink.js":"20","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/MoreInfo/MoreInfo.js":"21","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/DACMap/DACMap.js":"22","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/KelpMap/KelpMap.js":"23","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/KelpFarms/KelpFarms.js":"24","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ReforestationMap/ReforestationMap.js":"25","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Action/Action.js":"26","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Feedback/Feedback.js":"27"},{"size":6785,"mtime":1701472122844,"results":"28","hashOfConfig":"29"},{"size":3815,"mtime":1699471184530,"results":"30","hashOfConfig":"29"},{"size":1500,"mtime":1699471184451,"results":"31","hashOfConfig":"29"},{"size":3070,"mtime":1701401893612,"results":"32","hashOfConfig":"29"},{"size":3100,"mtime":1700581448023,"results":"33","hashOfConfig":"29"},{"size":1181,"mtime":1699471184536,"results":"34","hashOfConfig":"29"},{"size":3843,"mtime":1701810953024,"results":"35","hashOfConfig":"29"},{"size":937,"mtime":1699471184541,"results":"36","hashOfConfig":"29"},{"size":950,"mtime":1699471184456,"results":"37","hashOfConfig":"29"},{"size":5474,"mtime":1699926107250,"results":"38","hashOfConfig":"29"},{"size":501,"mtime":1699471184540,"results":"39","hashOfConfig":"29"},{"size":2517,"mtime":1701811281422,"results":"40","hashOfConfig":"29"},{"size":712,"mtime":1698335640843,"results":"41","hashOfConfig":"29"},{"size":574,"mtime":1699471184534,"results":"42","hashOfConfig":"29"},{"size":362,"mtime":1699471184541,"results":"43","hashOfConfig":"29"},{"size":1754,"mtime":1700581448022,"results":"44","hashOfConfig":"29"},{"size":301,"mtime":1699471184536,"results":"45","hashOfConfig":"29"},{"size":305,"mtime":1699471184537,"results":"46","hashOfConfig":"29"},{"size":105,"mtime":1699471184541,"results":"47","hashOfConfig":"29"},{"size":924,"mtime":1700153635250,"results":"48","hashOfConfig":"29"},{"size":13554,"mtime":1699921815953,"results":"49","hashOfConfig":"29"},{"size":25363,"mtime":1700582084435,"results":"50","hashOfConfig":"29"},{"size":8668,"mtime":1700582084479,"results":"51","hashOfConfig":"29"},{"size":714,"mtime":1699471184537,"results":"52","hashOfConfig":"29"},{"size":42017,"mtime":1700582084457,"results":"53","hashOfConfig":"29"},{"size":21645,"mtime":1701469282345,"results":"54","hashOfConfig":"29"},{"size":3679,"mtime":1700581448025,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},"14zfh1r",{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"62"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"73","usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"62"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"62"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"62"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"62"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/About/About.js",["147"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Navbar/Navbar.js",[],[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Accordion/Accordion.js",["148","149","150"],[],"import nReact, {useState} from 'react'\nimport \"./Accordion.css\"\nimport faqcaret from '../../assets/faqcaret.png'\n\n\n/**\n * This function is the accordion that is on the FAQ page\n * @param faq is the question and answer being pushed through\n * @param index what number in the list of faws it is\n * @param toggleFAQ the current state of the faq\n *\n * @returns {JSX.Element}\n *\n */\n\nfunction Accordion({faq, index, toggleFAQ}) {\n\n    return (\n        <div className={\"faq \" + (faq.open ? 'open' : '')} key={index} onClick={() => toggleFAQ(index)}>\n            <Line></Line>\n            <div className=\"faq-question\">\n                {faq.question}\n                <CaretImage isOpen={faq.open}></CaretImage>\n            </div>\n            <div className=\"faq-answer\">\n                {faq.answer}\n            </div>\n        </div>\n    );\n\n}\n\n/**\n * The caret image and if it is rotated or not\n * @param isOpen the state of the image. If it is open add the class name rotate,\n * and it will be rotated 180 degrees\n * @returns {JSX.Element}\n *\n */\nfunction CaretImage({isOpen}) {\n    const imageClass = isOpen ? 'rotate' : '';\n    return (\n        <img\n            src={faqcaret}\n            alt=\"FAQ caret Image\"\n            loading=\"lazy\"\n            id=\"faqcaret\"\n            className={imageClass}\n        />\n    );\n}\n\n\n/**\n * Lines that appear between questions\n *\n * @returns {JSX.Element}\n *\n */\nfunction Line() {\n    return (\n        <div className=\"line\"></div>\n    );\n}\n\n\nexport default Accordion","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Faq/Faq.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Footer/Footer.js",["151"],[],"import React from \"react\";\nimport \"./Footer.css\"\nimport {Link} from \"react-router-dom\";\n\n\n/**\n * \n * Defines the footer found at the bottom of each webpage. The footer\n * contains extra links for providing the users with extra information\n * and an additional way to navigate the website.\n * \n * Footer with columns and rows containing supplemental links\n * @returns The footer component\n */\n\nfunction Footer() {\n    return (\n        <div className=\"container\">\n            <div className=\"row\" id=\"footer-top\">\n                <div className=\"col\">\n                    <ul className=\"names\">\n                        <li className=\"title\">Contributors</li>\n                        <li className=\"link\"><a href=\"https://www.linkedin.com/in/jackson-holscher/\">Jack Holscher</a>\n                        </li>\n                        <li className=\"link\"><a href=\"https://www.linkedin.com/in/ishitakokil/\">Ishita Kokil</a></li>\n                        <li className=\"link\"><a href=\"https://www.linkedin.com/in/nicholas-wang7190/\">Nick Wang</a></li>\n                        <li className=\"link\"><a href=\"https://www.linkedin.com/in/eden-haase-90b688212/\">Edie Haase</a>\n                        </li>\n                        <li className=\"link\"><a href=\"https://hemanthyalamanchili.com/ \">Hemanth Yalamanchili</a></li>\n                    </ul>\n                </div>\n                <div className=\"col\">\n                    <ul className=\"names\">\n                        <li className=\"title\">Tools</li>\n                        <li className=\"link\"><Link to=\"/kelpfarms\"> Kelp Farms </Link></li>\n                        <li className=\"link\"><Link to=\"/reforestation\"> Reforestation </Link></li>\n                        <li className=\"link\"><Link to=\"/dac\"> Direct Air Capture </Link></li>\n                    </ul>\n                </div>\n\n                <div className=\"col\">\n                    <ul className=\"names\">\n                        <li className=\"title\"> Get Involved </li>\n                        <li className=\"link\"> <Link to=\"/feedback\"> Feedback & Suggestions </Link> </li>\n                        <li className=\"link\"> <Link to=\"/action\"> Take Action! </Link> </li>\n                    </ul>\n                </div>\n\n                <div className=\"col\">\n                    <ul className=\"names\">\n                        <li className=\"title\">Anthropocene Institute</li>\n                        <li className=\"link\"><a href=\"https://anthropoceneinstitute.com/\" target=\"_blank\">855 EL Camino\n                            Real<br/>Ste 13A N399<br/>Palo Alto, CA 94301</a></li>\n                        <li className=\"link\"><a href=\"tel:+1888-863-8730\">+1 (888) 863-8730</a></li>\n\n                    </ul>\n                </div>\n            </div>\n            \n            <div id=\"footer-break\"> <hr /> </div>\n\n            <div className=\"row\" id=\"footer-bottom\">\n                <div className=\"col\">\n                    <p className=\"footerText\">© Anthropocene Institute, All Rights Reserved</p>\n                </div>\n            </div>\n\n        </div>\n\n    )\n}\n\nexport default Footer","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/DirectAirCapture/DirectAirCapture.js",["152"],[],"import Heatmap from \"../../components/ReforestationMap/ReforestationMap\"\n\nimport DACMap from \"../../components/DACMap/DACMap\"\n\nimport \"./DirectAirCapture.css\"\n\n/**\n * A webpage for the Direct Air Capture optimization tool.\n * The webpage contains the heatmap for the most optimal locations\n * to setup a direct air capture plant/site based on different factors\n * \n * @returns The webpage containing the direct air capture\n *  optimization tool.\n */\nfunction DirectAirCapture() {\n\n  const colors = {\n    color0: \"#ffffff\",\n    color1: \"#fbcfcf\",\n    color2: \"#f79d9d\",\n    color3: \"#f06262\",\n    color4: \"#da3a3a\",\n    color5: \"#bd2525\",\n    color6: \"#a20c0c\",\n    color7: \"#7a0000\"\n  }\n\n  return (\n    <div className=\"dac-container\">\n      <DACBanner></DACBanner>\n      {/* <ReforestationMap colors={colors}/> */}\n      <DACMap colors={colors} />\n    </div>\n  );\n}\n\n\nfunction DACBanner() {\n  return (\n      <div className=\"dac-banner-image\">\n          <div className=\"dac-banner-text\">\n              <h1>Direct Air Capture</h1>\n              <p>Facilities to Filter and Process Carbon Dioxide Out of the Air</p>\n          </div>\n      </div>\n  )\n}\n\nexport default DirectAirCapture","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Data/Data.js",["153","154","155"],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Reforestation/Reforestation.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/HomeBodyIntro/HomeBodyIntro.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/OptimizationToolBlurb/OptimizationToolBlurb.js",["156","157","158"],[],"import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport \"./OptimizationToolBlurb.css\"\nimport kelpFarmMapImage from \"../../assets/kelpfarmsmapimage.png\";\nimport reforestationMapImage from \"../../assets/reforestationmap.jpg\";\nimport dacMapImage from \"../../assets/dacmap.jpg\";\n\n\n/**\n * Entire \"Optimization Tools\" section of the homepage\n *\n * @returns HTML for this section\n */\nfunction OptimizationToolBlurb() {\n    return (\n        <div className=\"blurb-container\">\n            <h1>Optimization Tools</h1>\n            <hr/>\n            <div className=\"blurb-row\">\n                <div className=\"colLeft\">\n                    <KelpFarmMapImage/>\n                </div>\n                <div className=\"colRight\">\n                    <Link to=\"kelpfarms\">\n                        <h2 className=\"toolTitle\">Kelp Farms</h2>\n                    </Link>\n                    <KelpFarmText/>\n                </div>\n            </div>\n\n            <hr/>\n\n            <div className=\"blurb-row\">\n                <div className=\"colLeft\">\n                    <ReforestationMapImage/>\n                </div>\n                <div className=\"colRight\">\n                    <Link to=\"reforestation\">\n                        <h2 className=\"toolTitle\">Reforestation</h2>\n                    </Link>\n                    <ReforestationText/>\n                </div>\n            </div>\n\n            <hr/>\n\n            <div className=\"blurb-row\">\n                <div className=\"colLeft\">\n                    <DACMapImage/>\n                </div>\n                <div className=\"bottomColRight\">\n                    <Link to=\"dac\">\n                        <h2 className=\"toolTitle\">Direct Air Capture</h2>\n                    </Link>\n                    <DACText/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n/**\n * The image next to the kelp farm section on this page\n *\n * @returns This image as an html object\n */\nfunction KelpFarmMapImage() {\n    return (\n        <Link to=\"/kelpfarms\">\n            <img\n                src={kelpFarmMapImage}\n                alt=\"Kelp Farm Map Image\"\n                loading=\"lazy\"\n                id=\"mapimg\"\n            />\n        </Link>\n    )\n}\n\n\n/**\n * The text for the kelp farm section of this page\n *\n * @returns An HTML object of this text\n */\nfunction KelpFarmText() {\n    return (\n        <p className=\"homePageText\">Kelp Farms hold significant potential for carbon removal and\n            environmental restoration. Depending on the species, kelp can live up to a year or longer.\n            During this time they can grow up to 98 feet tall. This fast rate of growth means that kelp\n            have a large photosynthesis potential. During photosynthesis carbon dioxide is absorbed\n            and locked in its tissues. It can be harvested or transported to the ocean floor after it dies.\n            When harvested it can be used as compost, food source, and an ingredient in many products.</p>\n    )\n}\n\n/**\n * The image next to the reforestation section on this page\n *\n * @returns This image as an html object\n */\nfunction ReforestationMapImage() {\n    return (\n        <Link to=\"/reforestation\">\n            <img\n                src={reforestationMapImage}\n                alt=\"Reforestation Map Image\"\n                loading=\"lazy\"\n                id=\"mapimg\"\n            />\n        </Link>\n    )\n}\n\n/**\n * The text for the reforestation section of this page\n *\n * @returns An HTML object of this text\n */\nfunction ReforestationText() {\n    return (\n        <p className=\"homePageText\">Reforestation plays a crucial role in carbon removal and\n            ecosystem restoration efforts. Planting trees and restoring forests not only enhances\n            biodiversity but also serves as a powerful carbon sink. As trees grow, they absorb carbon\n            dioxide from the atmosphere during photosynthesis, converting it into organic matter and\n            locking it away in their biomass. This process helps combat climate change by reducing the\n            concentration of greenhouse gases in the atmosphere. Additionally, mature forests act as\n            long-term carbon resevoirs, storing carbon for decades or even centuries. Reforestation\n            projects also offer numerous co-benefits, such as improving air and water quality,\n            and providing habitats for wildlife.</p>\n    )\n}\n\n/**\n * The image next to the dac section on this page\n *\n * @returns This image as an html object\n */\nfunction DACMapImage() {\n    return (\n        <Link to=\"/dac\">\n            <img\n                src={dacMapImage}\n                alt=\"Direct Air Capture Map Image\"\n                loading=\"lazy\"\n                id=\"mapimg\"\n            />\n        </Link>\n    )\n}\n\n\n/**\n * The text for the DAC section of this page\n *\n * @returns An HTML object of this text\n */\nfunction DACText() {\n    return (\n        <p className=\"homePageText\">Direct Air Capture (DAC) is an promising and effective\n            approach to carbon removal. A relatively new technology, direct air capture is the use of\n            chemical or physical processes to extract carbon dioxide directly from the ambient air.\n            Once captured, the carbon dioxide can be securely stored in underground caverns or repurposed\n            and sold for sustainable applications. DAC stands out as one of today's most innovative strategies\n            for carbon mitigation. </p>\n    )\n}\n\nexport default OptimizationToolBlurb","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/NoPage/NoPage.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Articles/Articles.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/Dropdown/Dropdown.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/index.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/reportWebVitals.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/App.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Home/Home.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Layout/Layout.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Tools/Tools.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ArticleLink/ArticleLink.js",["159","160","161"],[],"import \"./ArticleLink.css\"\n\n/**\n * \n * Defines the structure and functionality of a link on the articles page\n * The link contains a image and short description relating to the article\n * that the user can click to visit the information page.\n * \n * @param {*} props Data object containing article link and image\n * @returns An article link component\n */\nfunction ArticleLink(props) {\n  return (\n    <div className=\"article-wrap\">\n      <div className=\"article-link-wrap\">\n        <a href={props.link} className=\"article-link\" target=\"_blank\">\n          <img \n            src={props.image}\n            alt=\"Article Image Link. Click me!\"\n            loading=\"lazy\"\n            className=\"article-image\"\n          />\n        </a>\n      </div>\n\n      <a href={props.link} target=\"_blank\">\n        <h4 className=\"article-title\">\n          {props.children}\n        </h4>\n      </a>\n    </div>\n  );\n}\n\nexport default ArticleLink;","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/MoreInfo/MoreInfo.js",["162"],[],"import React, {useState} from 'react'\nimport \"./MoreInfo.css\"\nimport caret from '../../assets/faqcaret.png'\n\n\n/**\n * This function is the accordion that is on the FAQ page\n * @param type is the question and answer being pushed through\n * @param index what number in the list of faws it is\n * @param toggleType the current state of the faq\n *\n * @returns {JSX.Element}\n *\n */\n\nfunction MoreInfoAccordion({type, index, toggleType}) {\n    return (\n        <div className={\"type \" + (type.open ? 'open' : '')} key={index} onClick={() => toggleType(index)}>\n            <div className=\"type-title\">\n                {type.type}\n                <CaretImage isOpen={type.open}></CaretImage>\n            </div>\n            <div className=\"type-feature\">\n                {type.feature}\n            </div>\n            <Line></Line>\n        </div>\n    );\n\n}\n\n/**\n * The caret image and if it is rotated or not\n * @param isOpen the state of the image. If it is open add the class name rotate,\n * and it will be rotated 180 degrees\n * @returns {JSX.Element}\n *\n */\nfunction CaretImage({isOpen}) {\n    const imageClass = isOpen ? 'caret-rotate' : '';\n    return (\n        <img\n            src={caret}\n            alt=\"caret Image\"\n            loading=\"lazy\"\n            id=\"caret\"\n            className={imageClass}\n        />\n    );\n}\n\n\n/**\n * Lines that appear between questions\n *\n * @returns {JSX.Element}\n *\n */\nfunction Line() {\n    return (\n        <div className=\"line\"></div>\n    );\n}\n\n\n/**\n * Holds the questions and answers of the FAQs.\n *\n * @returns The contents of the FAQ page\n */\nfunction MoreInfo() {\n\n    const [types, setTypes] = useState([\n        {\n\n            type: 'Kelp Farms ',\n            feature: (\n                <>\n                    <div><strong className=\"feature-text-title\">Relative Efficiency</strong></div>\n                    <div className=\"feature-text\"> Our innovative heat map tool is designed to assist stakeholders in\n                        pinpointing the optimal locations for establishing kelp farms along the coastal regions of\n                        the United States. The concept of relative efficiency, a comprehensive metric employed by our tool,\n                        serves as a guiding beacon, revealing the prime spots for implementing kelp farms. Leveraging machine\n                        learning, our model processes extensive datasets, ensuring a precise prediction of relative efficiency.\n                        Our model considers the intricate interplay of various factors to offer a sophisticated analysis that\n                        greatly enhances strategic decision-making in the realm of kelp farming.\n                    </div>\n                    <div><strong className=\"feature-text-title\">Depth</strong></div>\n                    <div className=\"feature-text\">This measurement is the depth in meters from the surface of the water\n                        to the bottom of the ocean. This is an important measurement when determining the relative\n                        efficiency because kelp attaches to the seafloor and grows towards the water's surface. Kelp\n                        rely on sunlight to perform photosynthesis and generate food/energy. Due to the need for sunlight\n                        kelp requires shallow water so the sunlight can penetrate the water and reach the plant. For this\n                        reason kelp tend to grow near the coast where the water is shallow and relatively clear.\n                    </div>\n                    <div><strong className=\"feature-text-title\">pH</strong></div>\n                    <div className=\"feature-text\"> The pH measures acidity or basicity of the water. If the pH is less than 7 it\n                        is an indication of an acid, whereas a pH of greater than 7 indicates a base. Kelp spores and plants\n                        grow best in a pH range of 7.0-9.0. This is an important measurement when determining the relative\n                        efficiency when growing kelp as a pH out of this range could result in the kelp not surviving. This\n                        is of growing importance as ocean acidification continues.\n                    </div>\n                    <div><strong className=\"feature-text-title\">Temperature</strong></div>\n                    <div className=\"feature-text\"> This measurement is the temperature of the ocean water in celsius at location\n                        the sample was taken.This is an important measurement when determining the relative efficiency because\n                        kelp grow better in colder waters. They thrive at temperatures between five and twenty degrees celsius.\n                    </div>\n                </>\n            ),\n            open: true\n\n        },\n        {\n            type: 'Reforestation ',\n            feature: (\n                <>\n                    <div><strong className=\"feature-text-title\">Cost Efficiency</strong></div>\n                    <div className=\"feature-text\">Our innovative heat map tool is designed to assist stakeholders in\n                        pinpointing the optimal locations for reforestation in the United States. The concept of relative efficiency,\n                        a comprehensive metric employed by our tool, serves as a guiding beacon, revealing the prime spots for\n                        implementing reforestation. It takes into account factors such as elevation and precipitation. Leveraging machine\n                        learning, our model processes extensive datasets, ensuring a precise prediction of relative efficiency.\n                        Our model considers the intricate interplay of various factors to offer a sophisticated analysis that\n                        greatly enhances strategic decision-making in the realm of reforestation.\n                    </div>\n                    <div><strong className=\"feature-text-title\">Land prices</strong></div>\n                    <div className=\"feature-text\">The land prices are based on the average cost of farm land per acre.\n                        The number displayed is the average for that county or state. This variable was taken into\n                        account\n                        for reforestation because in order to plant trees land needs to be purchased to plan the trees\n                        on\n                    </div>\n                    <div><strong className=\"feature-text-title\">Palmer Z Index</strong></div>\n                    <div className=\"feature-text\">The Palmer Z Index measures short-term drought conditions. This is\n                        typically\n                        a better estimate than the PDSI as the shorter time scales enables identification of rapidly\n                        developing\n                        drought conditions. It is sometimes referred to as the Moisture Anomaly Index, and the derived\n                        values provide\n                        comparable measure of the relative anomalies of a region for both dryness and wetness when\n                        compared to the\n                        entire record for that location. This was used as an indicator if the region is a good location\n                        to\n                        plant trees as trees need water to perform photosynthesis and be able to sequester carbon and\n                        stay alive.\n                    </div>\n                    <div><strong className=\"feature-text-title\">Population</strong></div>\n                    <div className=\"feature-text\">The population is the number of people per county or per state. This\n                        number gives a good indication if the region is highly developed or less developed. It would be\n                        difficult to implement reforestation in an area that is densely populated. It is also an\n                        indication\n                        that there would not be much available land to plant trees on. For these reason we took\n                        population into account\n                        when developing our machine learning model\n                    </div>\n                    <div><strong className=\"feature-text-title\">Precipitation</strong></div>\n                    <div className=\"feature-text\">Water availability is a crucial component for reforestation. Regions with adequate\n                        rainfall can support the water demands of growing trees.</div>\n                    <div><strong className=\"feature-text-title\">Temperature</strong></div>\n                    <div className=\"feature-text\">The temperature is measured in degrees fahrenheit. This temperature\n                        give us an idea of the climate in that region. The best temperature for reforestation was found\n                        and used in\n                        our model to predict the best location for reforestation.\n                    </div>\n                </>\n            ),\n            open: false\n        },\n        {\n            type: 'Direct Air Capture ',\n            feature: (\n                <>\n                    <div><strong className=\"feature-text-title\">Cost Efficiency</strong></div>\n                    <div className=\"feature-text\">\n                        Our heat map tool is designed to guide stakeholders in identifying the most\n                        cost-efficient locations for implementing direct air capture (DAC) technology\n                        across the United States. Cost efficiency is a composite measure that indicates\n                        the relative expenditure to capture a ton of CO2, factoring in both operational\n                        and geographical parameters. This metric is critical in scaling DAC efforts sustainably.\n                        Our machine learning model processes vast datasets to predict cost efficiency with high\n                        accuracy. By considering the intricate interplay of various factors, our tool provides\n                        a nuanced analysis that aids in strategic decision-making.\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Population </strong></div>\n                    <div className=\"feature-text\">\n                        The population is the number of people per county or per state. This number gives a good\n                        indication if the region is highly developed or less developed. It would be difficult\n                        to implement reforestation in an area that is densely populated. It is also an indication\n                        that there would not be much available land to plant trees on. For these reason we took\n                        population into account when developing our machine learning model\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Temperature </strong></div>\n                    <div className=\"feature-text\">\n                        The efficiency of DAC units is influenced by ambient temperature, with extreme\n                        temperatures potentially requiring additional energy for operation.\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Precipitation </strong></div>\n                    <div className=\"feature-text\">\n                        Water availability is a crucial component for DAC. Regions with adequate\n                        rainfall can support the water demands of DAC without incurring substantial\n                        costs for water transportation.\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Elevation </strong></div>\n                    <div className=\"feature-text\">\n                        Higher elevations can affect the performance and energy requirements of DAC \n                        systems due to changes in air density and pressure.\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Electricity Prices </strong></div>\n                    <div className=\"feature-text\">\n                        As DAC is an energy-intensive process, local electricity prices are a\n                        significant determinant of ongoing operational costs.\n                    </div>\n                    <div><strong className=\"feature-text-title\"> Wages </strong></div>\n                    <div className=\"feature-text\">\n                        Labor costs can vary dramatically across counties, impacting the overall cost\n                        of DAC operations.\n                    </div>\n                </>\n            ),\n            open: false\n\n        }\n\n    ])\n\n    /**\n     * Toggles the faq when needed. This will display the answer when clicked on\n     *\n     * @returns The faq with a new state of open or closed\n     */\n    const toggleType = index => {\n        setTypes(types.map((type, i) => {\n            if (i === index) {\n                type.open = !type.open\n            } else {\n                type.open = false;\n            }\n            return type;\n        }))\n    }\n\n    return (\n        <div>\n            <div>\n                <h1 className=\"more-info-title\">More Info</h1>\n                <hr className=\"more-info-line\"/>\n            </div>\n            <div className=\"types\">\n                {types.map((type, i) => (\n                    <MoreInfoAccordion key={i} type={type} index={i} toggleType={toggleType}/>\n                ))}\n            </div>\n\n\n        </div>\n    )\n}\n\n\nexport default MoreInfo","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/DACMap/DACMap.js",["163","164","165"],[],"import \"../ReforestationMap/ReforestationMap.css\"\nimport React, {useState, useEffect, useRef} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport loadingSpinner from '../../assets/loading.gif';\n\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport {Link} from \"react-router-dom\";\n\n/**\n * \n * Defines the interactive heatmap component containing the best locations\n * to implement the direct air capture carbon removal technology.\n * Also includes the more info box and the search bar features\n * \n * @param {*} props Data object containing the heatmap colors\n * @returns The direct air capture map component\n */\nfunction DACMap(props) {\n\n    const mapContainer = useRef(null);\n    const [map, setMap] = useState(null);\n    const zoomThreshold = 3;\n    const [legendDisplay] = useState(\"block\");\n    const [isLoading, setIsLoading] = useState(false); // New loading state\n\n    useEffect(() => {\n        mapboxgl.accessToken =\n            \"pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA\";\n\n\n        const initializeMap = ({setMap, mapContainer}) => {\n\n\n            if (mapContainer && !mapContainer.current.classList.contains('mapboxgl-map')) {\n                const newMap = new mapboxgl.Map({\n                    container: mapContainer.current,\n                    style: \"mapbox://styles/mapbox/light-v11\",\n                    center: [-98, 38.88],\n                    minZoom: 1,\n                    zoom: 2.2,\n                });\n                const geocoder = new MapboxGeocoder({\n                    accessToken: mapboxgl.accessToken,\n                    mapboxgl: mapboxgl,\n                });\n                newMap.addControl(geocoder);\n                newMap.on(\"load\", () => {\n                    setMap(newMap);\n                    newMap.resize();\n\n                });\n            }\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [map]);\n    useEffect(() => {\n            if (map) {\n\n                if (map.getSource(\"state\")) {\n                    // If it does, update its data\n                    map.getSource(\"state\").setData(\"http://34.133.43.211/dacstategeojson.geojson\");\n\n                }\n                if (map.getSource(\"county\")) {\n                    // If it does, update its data\n                    map.getSource(\"county\").setData(\"http://34.133.43.211/daccountygeojson.geojson\");\n                }\n                if (!map.getSource(\"state\")) {\n                    map.addSource(\"state\", {\n                        type: \"geojson\",\n                        data: \"http://34.133.43.211/dacstategeojson.geojson\",\n                        promoteId: \"NAME\",\n                    });\n\n                    map.addLayer({\n                        id: \"state-data\",\n                        source: \"state\",\n                        // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n                        maxzoom: zoomThreshold,\n                        type: \"fill\",\n                        filter: [\"==\", \"isState\", \"yes\"],\n                        paint: {\n                            \"fill-color\": [\n                                \"case\",\n                                [\"boolean\", [\"feature-state\", \"hover\"], false],\n                                \"#ffe37a\", // Color to use when the condition is true (clicked)\n                                [\"boolean\", [\"feature-state\", \"click\"], false],\n                                \"#ffe37a\", // Color to use when the condition is true (clicked)\n                                [\n                                    \"interpolate\",\n                                    [\"linear\"],\n                                    [\"get\", \"class\"],\n                                    0,\n                                    props.colors.color0,\n                                    1,\n                                    props.colors.color1,\n                                    2,\n                                    props.colors.color2,\n                                    3,\n                                    props.colors.color3,\n                                    4,\n                                    props.colors.color4,\n                                    5,\n                                    props.colors.color5,\n                                    6,\n                                    props.colors.color6,\n                                    7,\n                                    props.colors.color7,\n                                ],\n                            ],\n                            \"fill-opacity\": 0.85,\n                        },\n                    });\n\n\n                    // define boundary lines for states so that\n                    // divisions are always obvious regardless of zoom\n                    map.addLayer({\n                        id: \"state-boundaries\",\n                        source: \"state\",\n                        type: \"line\",\n                        paint: {\n                            \"line-color\": \"#000\",\n                            \"line-width\": 0.1,\n                        },\n                    });\n\n                    //             // define boundary lines for counties so that\n                    //             // divisions are always obvious regardless of zoom\n                    // map.addLayer({\n                    // id: 'county-boundaries',\n                    // source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',\n                    // type: 'line',\n                    // paint: {\n                    //     'line-color': '#000',\n                    //     'line-width': .1\n                    // }\n                    // });\n                }\n                if (!map.getSource(\"county\")) {\n                    setIsLoading(true);\n\n                    map.addSource(\"county\", {\n                        type: \"geojson\",\n                        data: \"http://34.133.43.211/daccountygeojson.geojson\",\n                        promoteId: \"GEO_ID\",\n                    });\n                    map.addLayer({\n                        id: 'county-data',\n                        source: 'county',\n                        // 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n                        minzoom: zoomThreshold,\n                        type: 'fill',\n                        filter: ['==', 'isState', \"no\"],\n                        paint: {\n                            'fill-color': [\n                                'case',\n                                ['boolean', ['feature-state', 'hover'], false],\n                                '#ffe37a', // Color to use when the condition is true (clicked)\n                                ['boolean', ['feature-state', 'click'], false],\n                                '#ffe37a', // Color to use when the condition is true (clicked)\n                                [\n                                    'interpolate',\n                                    ['linear'],\n                                    ['get', 'class'],\n                                    0,\n                                    props.colors.color0,\n                                    1,\n                                    props.colors.color1,\n                                    2,\n                                    props.colors.color2,\n                                    3,\n                                    props.colors.color3,\n                                    4,\n                                    props.colors.color4,\n                                    5,\n                                    props.colors.color5,\n                                    6,\n                                    props.colors.color6,\n                                    7,\n                                    props.colors.color7\n                                ] // Default color based on the 'class' property\n                            ],\n                            'fill-opacity': .85,\n                        },\n                    });\n                    map.addLayer({\n                        id: 'county-boundaries',\n                        source: 'county',\n                        // 'source-layer': 'countyReforestation-dszxt3',\n                        type: 'line',\n                        minzoom: zoomThreshold,\n                        paint: {\n                            'line-color': '#000',\n                            'line-width': .1,\n                            'line-opacity': 0.5\n                        }\n                    });\n                }\n\n                let stateHoveredPolygonId = null;\n                let stateClickedPolygonId = null;\n                let countyHoveredPolygonId = null;\n                let countyClickedPolygonId = null;\n                map.getCanvas().style.cursor = \"pointer\";\n                map.once('idle', () => {\n                    setIsLoading(false)\n                });\n\n                if (map.getLayer('state-data')) {\n\n\n                    map.on(\"mousemove\", \"state-data\", (e) => {\n                        // console.log(\"hovering\")\n                        const properties = e.features[0].properties;\n\n                        // the current features properties\n                        const countyName = properties[\"NAME\"];\n                        if (stateHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: \"state\", id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature to 'click'\n                        stateHoveredPolygonId = e.features[0].id;\n                        if (stateHoveredPolygonId !== null) {\n                            console.log(stateHoveredPolygonId)\n                        }\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: true}\n                        );\n                    });\n                    map.on(\"click\", \"state-data\", (e) => {\n                        //Function to format percent\n                        function formatPercent(value) {\n                            value = value * 100;\n                            return value.toFixed(0) + '%';\n                        }\n\n                        // Function to add commas as thousands separators\n                        function addCommas(value) {\n                            return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        }\n\n                        function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                        // the span elements used in the sidebar\n                        const nameDisplay = document.getElementById('name');\n                        const costDisplay = document.getElementById('cost');\n                        const elecDisplay = document.getElementById('elec');\n                        const elevDisplay = document.getElementById('elev');\n                        const popDisplay = document.getElementById('pop');\n                        const preDisplay = document.getElementById('pre');\n                        const tempDisplay = document.getElementById('temp');\n\n                        // the properties of the feature\n                        const properties = e.features[0].properties;\n\n\n                        // the current features properties\n                        const stateName = properties['NAME'];\n                        const stateCost = properties['cost'];\n                        const stateElec = properties['electric'];\n                        const stateElev = properties['elevation'];\n                        const statePop = properties['population'];\n                        const statePre = properties['precipitation'];\n                        const stateTemp = properties['temperature'];\n\n                        //catch if data is not found and display no data found\n                        if (isNaN(stateCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(stateCost);\n                        }\n                        if (isNaN(stateElec)){\n                            elecDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elecDisplay.textContent = addCommas(stateElec);\n                        }\n                        if (isNaN(stateElev)){\n                            elevDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elevDisplay.textContent = addCommas(stateElev);\n                        }\n                        if (isNaN(statePop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(statePop);\n                        }\n                        if (isNaN(statePre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(statePre);\n                        }\n                        if (isNaN(stateTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(stateTemp);\n                        }\n\n                        //display the property values\n                        nameDisplay.textContent = stateName;\n\n\n                        if (stateClickedPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: 'state', id: stateClickedPolygonId},\n                                {click: false}\n                            );\n                        }\n                        // Set the state of the clicked feature to 'click'\n                        stateClickedPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'state', id: stateClickedPolygonId},\n                            {click: true}\n                        );\n\n                    });\n\n                    //change the color when hovered over\n                    map.on('mousemove', 'state-data', (e) => {\n\n                        if (stateHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature\n                            map.setFeatureState(\n                                {source: 'state', id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature to 'click'\n                        stateHoveredPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'state', id: stateHoveredPolygonId},\n                            {hover: true}\n                        );\n\n                    });\n\n                    //reset the color of the state after it is no longer being hovered\n                    map.on('mouseleave', 'state-data', () => {\n                        if (stateHoveredPolygonId !== null) {\n                            map.setFeatureState(\n                                {source: 'state', id: stateHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n                        stateHoveredPolygonId = null;\n                    });\n\n                    //hover state for the county data\n                    map.on('mousemove', 'county-data', (e) => {\n                        if (countyHoveredPolygonId !== null) {\n                            // Reset the state of the previously clicked feature in the 'county-data' layer\n                            map.setFeatureState(\n                                {source: 'county', id: countyHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n\n                        // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n                        countyHoveredPolygonId = e.features[0].id;\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: true}\n                        );\n                    });\n\n                    //resetting the color on the county when no longer hovered\n                    map.on('mouseleave', 'county-data', () => {\n                        if (countyHoveredPolygonId !== null) {\n                            map.setFeatureState(\n                                {source: 'county', id: countyHoveredPolygonId},\n                                {hover: false}\n                            );\n                        }\n                        countyHoveredPolygonId = null;\n                    });\n                    // When the map is clicked display a popup\n                    map.on('click', 'county-data', (e) => {\n                        //Function to format percent\n                        function formatPercent(value) {\n                            value = value * 100;\n                            return value.toFixed(0) + '%';\n                        }\n\n                        // Function to add commas as thousands separators\n                        function addCommas(value) {\n                            return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                        }\n\n                        function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                        // the span elements used in the sidebar\n                        const nameDisplay = document.getElementById('name');\n                        const costDisplay = document.getElementById('cost');\n                        const elecDisplay = document.getElementById('elec');\n                        const elevDisplay = document.getElementById('elev');\n                        const popDisplay = document.getElementById('pop');\n                        const preDisplay = document.getElementById('pre');\n                        const tempDisplay = document.getElementById('temp');\n\n                        // the properties of the feature\n                        const properties = e.features[0].properties;\n\n                        console.log(e.features)\n\n                        // the current features properties\n                        const countyName = properties['NAME'];\n                        const countyCost = parseFloat(properties['cost']);\n                        const countyElec = parseFloat(properties['electric']);\n                        const countyElev = parseFloat(properties['elevation']);\n                        const countyPop = parseFloat(properties['population']);\n                        const countyPre = parseFloat(properties['precipitation']);\n                        const countyTemp = parseFloat(properties['temperature']);\n\n                        // displaying no data if there is no data found for the county\n                        if (isNaN(countyCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(countyCost);\n                        }\n                        if (isNaN(countyElec)){\n                            elecDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elecDisplay.textContent = addCommas(countyElec);\n                        }\n                        if (isNaN(countyElev)){\n                            elevDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            elevDisplay.textContent = addCommas(countyElev);\n                        }\n                        if (isNaN(countyPop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(countyPop);\n                        }\n                        if (isNaN(countyPre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(countyPre);\n                        }\n                        if (isNaN(countyTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(countyTemp);\n                        }\n\n\n\n                        nameDisplay.textContent = countyName;\n\n                        // reset county\n                        if (countyClickedPolygonId !== null) {\n                            // Reset the state of the previously clicked feature in the 'county-data' layer\n                            map.setFeatureState(\n                                {source: 'county', id: countyClickedPolygonId},\n                                {click: false}\n                            );\n                        }\n\n                        // Set the state of the clicked feature in the 'county-data' layer to 'click'\n                        countyClickedPolygonId = e.features[0].id;\n\n                        map.setFeatureState(\n                            {source: 'county', id: countyClickedPolygonId},\n                            {click: true}\n                        );\n\n\n                    });\n\n                    // changing the mouse on hover\n                    map.on('mouseenter', 'county-data', () => {\n                        map.getCanvas().style.cursor = 'pointer';\n                    });\n                    //changing the mouse when no longer hovering over a county\n                    map.on('mouseleave', 'county-data', () => {\n                        map.getCanvas().style.cursor = '';\n                    });\n\n                }\n            }\n        }\n\n        , [map, \"http://34.133.43.211/dacstategeojson.geojson\"]);\n\n    return (\n        <div className=\"map-container-wrapper\">\n            {isLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-content\">\n                        <img src={loadingSpinner} alt=\"Loading...\"/>\n                        <span className=\"loading-text\">Loading AI Model</span>\n                    </div>\n                </div>\n            )}\n            <div ref={mapContainer} className=\"map-container\">\n\n                <div className='info-section'>\n                    <div className='state-name'><span id='name'> Select a State or County </span></div>\n                    <hr className='name-line'/>\n                    <div><strong>Cost Efficiency:</strong> <span id='cost'></span></div>\n                    <div><strong>Electric:</strong> <span id='elec'></span></div>\n                    <div><strong>Elevation in Feet:</strong> <span id='elev'></span></div>\n                    <div><strong>Population:</strong> <span id='pop'></span></div>\n                    <div><strong>Precipitation:</strong> <span id='pre'></span></div>\n                    <div><strong>Temperature:</strong> <span id='temp'></span></div>\n                    <Link to=\"/moreinfo\">More Info</Link>\n                </div>\n\n                <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n                    <h3>Cost Efficiency</h3>\n                    <h4>Most Efficient</h4>\n                    <div><span className=\"b723122\" style={{backgroundColor: props.colors.color7}}></span></div>\n                    <div><span className=\"b8b4225\" style={{backgroundColor: props.colors.color6}}></span></div>\n                    <div><span className=\"ba25626\" style={{backgroundColor: props.colors.color5}}></span></div>\n                    <div><span className=\"bb86b25\" style={{backgroundColor: props.colors.color4}}></span></div>\n                    <div><span className=\"bca8323\" style={{backgroundColor: props.colors.color3}}></span></div>\n                    <div><span className=\"bda9c20\" style={{backgroundColor: props.colors.color2}}></span></div>\n                    <div><span className=\"be6b71e\" style={{backgroundColor: props.colors.color1}}></span></div>\n                    <h4>Least Efficient</h4>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default DACMap;","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/KelpMap/KelpMap.js",["166","167"],[],"import \"../ReforestationMap/ReforestationMap.css\"\nimport React, {useState, useEffect, useRef} from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport {Link} from \"react-router-dom\";\nimport kelpData from \"./stateKelpFarm.geojson\"\n\n\nfunction KelpMap(props) {\n\n    const mapContainer = useRef(null);\n    const [legendDisplay] = useState('block');\n    const zoomThreshold = 3;\n\n\n    useEffect(() => {\n        // the access token for the mapbox api\n        mapboxgl.accessToken = 'pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA';\n\n        // adding the map with the right style\n        const map = new mapboxgl.Map({\n            container: mapContainer.current,\n            style: 'mapbox://styles/mapbox/light-v11',\n            center: [-98, 38.88],\n            minZoom: 2,\n            zoom: 2.2,\n        });\n\n        // Add Geocoder which creates the search bar\n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl,\n        });\n\n        // Add the search bar to the heatmap\n        map.addControl(geocoder);\n\n        //load the data on the map\n        map.on('load', () => {\n            map.addSource('kelp', {\n                type: 'geojson',\n                data: kelpData,\n                generateId: true // This ensures that all features have unique IDs\n            });\n\n            map.addLayer({\n                id: 'kelp-data',\n                type: 'circle',\n                source: 'kelp',\n                paint: {\n                    'circle-radius': 6,\n                    'circle-color': [\n                        'case',\n                        ['boolean', ['feature-state', 'hover'], false],\n                        '#ffe37a', // Color to use when the condition is true (clicked)\n                        ['boolean', ['feature-state', 'click'], false],\n                        '#ffe37a', // Color to use when the condition is true (clicked)\n                        [\n                            'interpolate',\n                            ['linear'],\n                            ['get', 'class'],\n                            0,\n                            props.colors.color0,\n                            1,\n                            props.colors.color1,\n                            2,\n                            props.colors.color2,\n                            3,\n                            props.colors.color3,\n                            4,\n                            props.colors.color4,\n                            5,\n                            props.colors.color5,\n                            6,\n                            props.colors.color6,\n                            7,\n                            props.colors.color7\n                        ]\n                    ],\n                }\n            });\n        });\n\n        //changing the curser when hovering\n        map.on('mouseenter', 'kelp-data', () => {\n            map.getCanvas().style.cursor = 'pointer';\n        });\n        // resetting the curser\n        map.on('mouseleave', 'kelp-data', () => {\n            map.getCanvas().style.cursor = '';\n        });\n\n        let stateHoveredPolygonId = null;\n        let stateClickedPolygonId = null;\n\n        map.on('click', 'kelp-data', (e) => {\n\n            // the span elements used in the sidebar\n            const nameDisplay = document.getElementById('name');\n            const depthDisplay = document.getElementById('depth');\n            const phDisplay = document.getElementById('ph');\n            const tempDisplay = document.getElementById('temp');\n            const locDisplay = document.getElementById('loc');\n\n\n            // the properties of the feature\n            const properties = e.features[0].properties;\n\n            // the current features properties\n            const kelpLat = properties['lat'];\n            const kelpLong = properties['long'];\n            const kelpDepth = properties['depth'];\n            const kelpPH = properties['ph'];\n            const kelpLoc = properties['loc'];\n            const kelpTemp = properties['temperature'];\n\n            //Function to format percent\n            function formatPercent(value) {\n                value = value * 100;\n                return value.toFixed(0) + '%';\n            }\n\n            // Function to add commas as thousands separators\n            function addCommas(value) {\n                return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n            }\n\n            function formatTemp(value) {\n                value = value.toFixed(2);\n                return value + \"°C\";\n            }\n\n            // Function to format lat and long coords\n            function formatCoordinates(lat, long) {\n                return `Lat: ${lat.toFixed(4)}° Long: ${long.toFixed(2)}°`;\n            }\n\n            nameDisplay.textContent = formatCoordinates(kelpLat, kelpLong)\n            locDisplay.textContent = formatPercent(kelpLoc);\n            depthDisplay.textContent = addCommas(kelpDepth);\n            phDisplay.textContent = addCommas(kelpPH);\n            tempDisplay.textContent = formatTemp(kelpTemp);\n\n            // resetting the last clicked polygon to the original color\n            if (stateClickedPolygonId !== null) {\n                map.setFeatureState(\n                    {source: 'kelp', id: stateClickedPolygonId},\n                    {click: false}\n                );\n            }\n            // changing the new clicked state to yellow\n            stateClickedPolygonId = e.features[0].id;\n            map.setFeatureState(\n                {source: 'kelp', id: stateClickedPolygonId},\n                {click: true}\n            );\n\n            //hover state\n            map.on('mousemove', 'kelp-data', (e) => {\n\n                if (stateHoveredPolygonId !== null) {\n                    // Reset the state of the previously clicked feature\n                    map.setFeatureState(\n                        {source: 'kelp', id: stateHoveredPolygonId},\n                        {hover: false}\n                    );\n                }\n\n                // Set the state of the clicked feature to 'click'\n                stateHoveredPolygonId = e.features[0].id;\n                map.setFeatureState(\n                    {source: 'kelp', id: stateHoveredPolygonId},\n                    {hover: true}\n                );\n\n            });\n\n            //resetting after the sate is no longer hovered\n            map.on('mouseleave', 'kelp-data', () => {\n                if (stateHoveredPolygonId !== null) {\n                    map.setFeatureState(\n                        {source: 'kelp', id: stateHoveredPolygonId},\n                        {hover: false}\n                    );\n                }\n                stateHoveredPolygonId = null;\n            });\n        });\n    }, []);\n\n    return (\n\n        <div ref={mapContainer} className=\"map-container\">\n\n            <div className='info-section'>\n                <div className='state-name'><span id='name'> Select a Data Point </span></div>\n                <hr className='name-line'/>\n                <div><strong>Relative Efficiency:</strong> <span id='loc'></span></div>\n                <div><strong>Depth:</strong> <span id='depth'></span></div>\n                <div><strong>PH:</strong> <span id='ph'></span></div>\n                <div><strong>Temperature:</strong> <span id='temp'></span></div>\n                <Link to=\"/moreinfo\">More Info</Link>\n            </div>\n\n            <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n                <h3>Relative Efficiency</h3>\n                <h4>Most Efficient</h4>\n                <div><span className=\"b723122\" style={{backgroundColor: props.colors.color7}}></span></div>\n                <div><span className=\"b8b4225\" style={{backgroundColor: props.colors.color6}}></span></div>\n                <div><span className=\"ba25626\" style={{backgroundColor: props.colors.color5}}></span></div>\n                <div><span className=\"bb86b25\" style={{backgroundColor: props.colors.color4}}></span></div>\n                <div><span className=\"bca8323\" style={{backgroundColor: props.colors.color3}}></span></div>\n                <div><span className=\"bda9c20\" style={{backgroundColor: props.colors.color2}}></span></div>\n                <div><span className=\"be6b71e\" style={{backgroundColor: props.colors.color1}}></span></div>\n                <h4>Least Efficient</h4>\n            </div>\n        </div>\n\n    );\n}\n\nexport default KelpMap;","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/KelpFarms/KelpFarms.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/components/ReforestationMap/ReforestationMap.js",["168","169","170"],[],"import \"./ReforestationMap.css\";\nimport React, {useEffect, useRef, useState} from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport loadingSpinner from '../../assets/loading.gif';\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport {Link} from \"react-router-dom\";\n\n\nfunction ChoroplethMap(props) {\n    const mapContainer = useRef(null);\n    const [map, setMap] = useState(null);\n    const zoomThreshold = 3;\n    const [legendDisplay] = useState(\"block\");\n    const [isLoading, setIsLoading] = useState(false); // New loading state\n\n    // Initialize the map\n    useEffect(() => {\n        // mapbox api access token\n        mapboxgl.accessToken =\n            \"pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA\";\n\n\n        const initializeMap = ({setMap, mapContainer}) => {\n\n\n            if (mapContainer && !mapContainer.current.classList.contains('mapboxgl-map')) {\n                const newMap = new mapboxgl.Map({\n                    container: mapContainer.current,\n                    style: \"mapbox://styles/mapbox/light-v11\",\n                    center: [-98, 38.88],\n                    minZoom: 1,\n                    zoom: 2.2,\n                });\n                const geocoder = new MapboxGeocoder({\n                    accessToken: mapboxgl.accessToken,\n                    mapboxgl: mapboxgl,\n                });\n                newMap.addControl(geocoder);\n                newMap.on(\"load\", () => {\n                    setMap(newMap);\n                    newMap.resize();\n\n                });\n            }\n        };\n\n        if (!map) initializeMap({setMap, mapContainer});\n    }, [map]);\n\n\n    // Load GeoJSON into the map\n    useEffect(() => {\n        if (map) {\n\n            if (map.getSource(\"state\")) {\n                // If it does, update its data\n                map.getSource(\"state\").setData(\"http://34.133.43.211/forestationstategeojson.geojson\");\n\n            }\n            if (map.getSource(\"county\")) {\n                // If it does, update its data\n                map.getSource(\"county\").setData(\"http://34.133.43.211/forestationcountygeojson.geojson\");\n            }\n            if (!map.getSource(\"state\")) {\n                map.addSource(\"state\", {\n                    type: \"geojson\",\n                    data: \"http://34.133.43.211/forestationstategeojson.geojson\",\n                    promoteId: \"NAME\",\n                });\n\n                map.addLayer({\n                    id: \"state-data\",\n                    source: \"state\",\n                    // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n                    maxzoom: zoomThreshold,\n                    type: \"fill\",\n                    filter: [\"==\", \"isState\", \"yes\"],\n                    paint: {\n                        \"fill-color\": [\n                            \"case\",\n                            [\"boolean\", [\"feature-state\", \"hover\"], false],\n                            \"#ffe37a\", // Color to use when the condition is true (clicked)\n                            [\"boolean\", [\"feature-state\", \"click\"], false],\n                            \"#ffe37a\", // Color to use when the condition is true (clicked)\n                            [\n                                \"interpolate\",\n                                [\"linear\"],\n                                [\"get\", \"class\"],\n                                0,\n                                props.colors.color0,\n                                1,\n                                props.colors.color1,\n                                2,\n                                props.colors.color2,\n                                3,\n                                props.colors.color3,\n                                4,\n                                props.colors.color4,\n                                5,\n                                props.colors.color5,\n                                6,\n                                props.colors.color6,\n                                7,\n                                props.colors.color7,\n                            ],\n                        ],\n                        \"fill-opacity\": 0.85,\n                    },\n                });\n\n\n                // define boundary lines for states so that\n                // divisions are always obvious regardless of zoom\n                map.addLayer({\n                    id: \"state-boundaries\",\n                    source: \"state\",\n                    type: \"line\",\n                    paint: {\n                        \"line-color\": \"#000\",\n                        \"line-width\": 0.1,\n                    },\n                });\n\n                //             // define boundary lines for counties so that\n                //             // divisions are always obvious regardless of zoom\n                // map.addLayer({\n                // id: 'county-boundaries',\n                // source: 'county',\n                // 'source-layer': 'countyReforestation-dszxt3',\n                // type: 'line',\n                // paint: {\n                //     'line-color': '#000',\n                //     'line-width': .1\n                // }\n                // });\n            }\n            if (!map.getSource(\"county\")) {\n                setIsLoading(true);\n\n                map.addSource(\"county\", {\n                    type: \"geojson\",\n                    data: \"http://34.133.43.211/forestationcountygeojson.geojson\",\n                    promoteId: \"GEO_ID\",\n                });\n                map.addLayer({\n                    id: 'county-data',\n                    source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n                    minzoom: zoomThreshold,\n                    type: 'fill',\n                    filter: ['==', 'isState', \"no\"],\n                    paint: {\n                        'fill-color': [\n                            'case',\n                            ['boolean', ['feature-state', 'hover'], false],\n                            '#ffe37a', // Color to use when the condition is true (clicked)\n                            ['boolean', ['feature-state', 'click'], false],\n                            '#ffe37a', // Color to use when the condition is true (clicked)\n                            [\n                                'interpolate',\n                                ['linear'],\n                                ['get', 'class'],\n                                0,\n                                props.colors.color0,\n                                1,\n                                props.colors.color1,\n                                2,\n                                props.colors.color2,\n                                3,\n                                props.colors.color3,\n                                4,\n                                props.colors.color4,\n                                5,\n                                props.colors.color5,\n                                6,\n                                props.colors.color6,\n                                7,\n                                props.colors.color7\n                            ] // Default color based on the 'class' property\n                        ],\n                        'fill-opacity': .85,\n                    },\n                });\n                map.addLayer({\n                    id: 'county-boundaries',\n                    source: 'county',\n                    // 'source-layer': 'countyReforestation-dszxt3',\n                    type: 'line',\n                    minzoom: zoomThreshold,\n                    paint: {\n                        'line-color': '#000',\n                        'line-width': .1,\n                        'line-opacity': 0.5\n                    }\n                });\n            }\n\n            // });\n\n\n            let stateHoveredPolygonId = null;\n            let stateClickedPolygonId = null;\n            let countyHoveredPolygonId = null;\n            let countyClickedPolygonId = null;\n            map.getCanvas().style.cursor = \"pointer\";\n            map.once('idle', () => {\n                setIsLoading(false)\n            });\n\n            if (map.getLayer('state-data')) {\n\n\n                map.on(\"mousemove\", \"state-data\", (e) => {\n                    // console.log(\"hovering\")\n                    const properties = e.features[0].properties;\n\n                    // the current features properties\n                    const countyName = properties[\"NAME\"];\n                    if (stateHoveredPolygonId !== null) {\n                        // Reset the state of the previously clicked feature\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n\n                    // Set the state of the clicked feature to 'click'\n                    stateHoveredPolygonId = e.features[0].id;\n                    if (stateHoveredPolygonId !== null) {\n                        console.log(stateHoveredPolygonId)\n                    }\n                    map.setFeatureState(\n                        {source: \"state\", id: stateHoveredPolygonId},\n                        {hover: true}\n                    );\n                });\n\n                // When the map is clicked display a popup\n\n                map.on(\"click\", \"state-data\", (e) => {\n                    function formatCurrency(value) {\n                        return (\n                            \"$\" + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\")\n                        );\n                    }\n\n                    //Function to format percent\n                    function formatPercent(value) {\n                        value = value * 100;\n                        return value.toFixed(0) + \"%\";\n                    }\n\n                    // Function to add commas as thousands separators\n                    function addCommas(value) {\n                        return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\");\n                    }\n                    function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n\n                    // Commented out code that was used when we had the dropdown option\n                    //let dropdown = document.getElementById(\"dropdown\");\n                    //let title = dropdown.options[dropdown.selectedIndex].text\n                    //title + \": \" + e.features[0].properties[dropdown.value]\n                    // Get the feature's properties\n                    //The features at the coordinate that was picked\n\n                    // the span elements used in the sidebar\n                    const nameDisplay = document.getElementById(\"name\");\n                    const costDisplay = document.getElementById(\"cost\");\n                    const landDisplay = document.getElementById(\"land\");\n                    const zDisplay = document.getElementById(\"z\");\n                    const popDisplay = document.getElementById(\"pop\");\n                    const preDisplay = document.getElementById(\"pre\");\n                    const tempDisplay = document.getElementById(\"temp\");\n\n\n                    // the properties of the feature\n                    const properties = e.features[0].properties;\n\n                    // the current features properties\n                    const stateName = properties[\"NAME\"];\n                    const stateCost = parseFloat(properties[\"cost\"]);\n                    const stateLand = parseFloat(properties[\"land\"]);\n                    const stateZ = parseFloat(properties[\"palmer\"]);\n                    const statePop = parseFloat(properties[\"population\"]);\n                    const statePre = parseFloat(properties[\"precipitation\"]);\n                    const stateTemp = parseFloat(properties[\"temperature\"]);\n\n                     if (isNaN(stateCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(stateCost);\n                        }\n                        if (isNaN(stateLand)){\n                            landDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            landDisplay.textContent = formatCurrency(stateLand);\n                        }\n                        if (isNaN(stateZ)){\n                            zDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            zDisplay.textContent = stateZ.toFixed(2);\n                        }\n                        if (isNaN(statePop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(statePop);\n                        }\n                        if (isNaN(statePre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(statePre);\n                        }\n                        if (isNaN(stateTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(stateTemp);\n                        }\n\n                    // Function to format currency with dollar sign and commas\n                    // Display the property values\n                    nameDisplay.textContent = stateName;\n\n                    if (stateClickedPolygonId !== null) {\n                        // Reset the state of the previously clicked feature\n                        map.setFeatureState(\n                            {source: \"state\", id: stateClickedPolygonId},\n                            {click: false}\n                        );\n                    }\n\n                    // Set the state of the clicked feature to 'click'\n                    stateClickedPolygonId = e.features[0].id;\n                    if (stateClickedPolygonId !== null) {\n                        console.log(stateClickedPolygonId);\n                    }\n                    map.setFeatureState(\n                        {source: \"state\", id: stateClickedPolygonId},\n                        {click: true}\n                    );\n\n                });\n\n\n                map.on(\"mouseleave\", \"state-data\", () => {\n                    map.getCanvas().style.cursor = '';\n\n                    if (stateHoveredPolygonId !== null) {\n                        map.setFeatureState(\n                            {source: \"state\", id: stateHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n                    stateHoveredPolygonId = null;\n\n                    map.getCanvas().style.cursor = '';\n                });\n\n\n                map.on('mousemove', 'county-data', (e) => {\n                    if (countyHoveredPolygonId !== null) {\n                        // Reset the state of the previously clicked feature in the 'county-data' layer\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n\n                    // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n                    countyHoveredPolygonId = e.features[0].id;\n                    map.setFeatureState(\n                        {source: 'county', id: countyHoveredPolygonId},\n                        {hover: true}\n                    );\n                });\n                map.on('mouseleave', 'county-data', () => {\n                    if (countyHoveredPolygonId !== null) {\n                        map.setFeatureState(\n                            {source: 'county', id: countyHoveredPolygonId},\n                            {hover: false}\n                        );\n                    }\n                    countyHoveredPolygonId = null;\n                });\n                // When the map is clicked display a popup\n                map.on('click', 'county-data', (e) => {\n\n                    // // Function to format currency with dollar sign and commas\n                    function formatCurrency(value) {\n                        return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                    }\n\n                    // //Function to format percent\n                    function formatPercent(value) {\n                        value = value * 100;\n                        return value.toFixed(0) + '%';\n                    }\n\n                    // Function to add commas as thousands separators\n                    function addCommas(value) {\n                        return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n                    }\n                    function formatTemp(value) {\n                            value = value.toFixed(2);\n                            return value + \"°F\";\n                        }\n\n                    // // the span elements used in the sidebar\n                    const nameDisplay = document.getElementById('name');\n                    const costDisplay = document.getElementById('cost');\n                    const landDisplay = document.getElementById('land');\n                    const zDisplay = document.getElementById('z');\n                    const popDisplay = document.getElementById('pop');\n                    const preDisplay = document.getElementById('pre');\n                    const tempDisplay = document.getElementById('temp');\n\n                    // // the properties of the feature\n                    const properties = e.features[0].properties;\n\n                    // // the current features properties\n                    const countyName = properties['NAME'];\n                    const countyCost = parseFloat(properties['cost']);\n                    const countyLand = parseFloat(properties['land']);\n                    const countyZ = parseFloat(properties['palmer']);\n                    const countyPop = parseFloat(properties['population']);\n                    const countyPre = parseFloat(properties['precipitation']);\n                    const countyTemp = parseFloat(properties['temperature']);\n\n                    if (isNaN(countyCost)){\n                            costDisplay.textContent = \"No Data Found\";\n                        }\n                        else{\n                            costDisplay.textContent = formatPercent(countyCost);\n                        }\n                        if (isNaN(countyLand)){\n                            landDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            landDisplay.textContent = formatCurrency(countyLand);\n                        }\n                        if (isNaN(countyZ)){\n                            zDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            zDisplay.textContent = countyZ.toFixed(2);\n                        }\n                        if (isNaN(countyPop)){\n                            popDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            popDisplay.textContent = addCommas(countyPop);\n                        }\n                        if (isNaN(countyPre)){\n                            preDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            preDisplay.textContent = addCommas(countyPre);\n                        }\n                        if (isNaN(countyTemp)){\n                            tempDisplay.textContent= \"No Data Found\";\n                        }\n                        else{\n                            tempDisplay.textContent = formatTemp(countyTemp);\n                        }\n\n\n\n\n                    // // Display the property values\n                    nameDisplay.textContent = countyName;\n\n                    map.setFeatureState(\n                        {source: 'county', id: countyClickedPolygonId},\n                        {click: false}\n                    );\n\n\n                    countyClickedPolygonId = e.features[0].id;\n\n                    map.setFeatureState(\n                        {source: 'county', id: countyClickedPolygonId},\n                        {click: true}\n                    );\n\n                });\n\n\n                map.on(\"mouseenter\", \"county-data\", () => {\n                    map.getCanvas().style.cursor = \"pointer\";\n                });\n\n                map.on(\"mouseleave\", \"county-data\", () => {\n                    map.getCanvas().style.cursor = \"\";\n                });\n\n            }\n        }\n    }, [map, \"http://34.133.43.211/forestationstategeojson.geojson\"]);\n\n    return (\n        <div className=\"map-container-wrapper\">\n            {isLoading && (\n                <div className=\"loading-overlay\">\n                    <div className=\"loading-content\">\n                        <img src={loadingSpinner} alt=\"Loading...\"/>\n                        <span className=\"loading-text\">Loading AI Model</span>\n                    </div>\n                </div>\n            )}\n            <div ref={mapContainer} className=\"map-container\">\n                <div className=\"info-section\">\n                    <div className=\"state-name\">\n                        <span id=\"name\"></span>\n                    </div>\n                    <hr className=\"name-line\"/>\n                    <div>\n                        <strong>Cost Efficiency:</strong> <span id=\"cost\"></span>\n                    </div>\n                    <div>\n                        <strong>Land prices:</strong> <span id=\"land\"></span>\n                    </div>\n                    <div>\n                        <strong>Palmer-z index:</strong> <span id=\"z\"></span>\n                    </div>\n                    <div>\n                        <strong>Population:</strong> <span id=\"pop\"></span>\n                    </div>\n                    <div>\n                        <strong>Precipitation:</strong> <span id=\"pre\"></span>\n                    </div>\n                    <div>\n                        <strong>Temperature:</strong> <span id=\"temp\"></span>\n                    </div>\n                    <Link to=\"/moreinfo\">More Info</Link>\n                </div>\n\n                <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n                    <h3>Relative Efficiency</h3>\n                    <h4>Most Efficient</h4>\n                    <div>\n          <span\n              className=\"b723122\"\n              style={{backgroundColor: props.colors.color7}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"b8b4225\"\n              style={{backgroundColor: props.colors.color6}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"ba25626\"\n              style={{backgroundColor: props.colors.color5}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bb86b25\"\n              style={{backgroundColor: props.colors.color4}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bca8323\"\n              style={{backgroundColor: props.colors.color3}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"bda9c20\"\n              style={{backgroundColor: props.colors.color2}}\n          ></span>\n                    </div>\n                    <div>\n          <span\n              className=\"be6b71e\"\n              style={{backgroundColor: props.colors.color1}}\n          ></span>\n                    </div>\n                    <h4>Least Efficient</h4>\n                </div>\n            </div>\n        </div>\n\n    );\n}\n\nexport default ChoroplethMap;\n\n\n// function ChoroplethMap(props) {\n\n//     const mapContainer = useRef(null);\n//     const [legendDisplay] = useState('block');\n//     const zoomThreshold = 3;\n\n//     useEffect(() => {\n//         mapboxgl.accessToken = 'pk.eyJ1IjoiamhvbHNjaDI5IiwiYSI6ImNsbjJjaWllNzAwcDQyam1wYnF6NHQ0Z24ifQ.TYll92t4SavsRHHFUhU-UA';\n\n//         const map = new mapboxgl.Map({\n//             container: mapContainer.current,\n//             style: 'mapbox://styles/mapbox/light-v11',\n//             center: [-98, 38.88],\n//             minZoom: 2,\n//             zoom: 2.2,\n//         });\n//         // Add Geocoder which creates the search bar\n//         const geocoder = new MapboxGeocoder({\n//             accessToken: mapboxgl.accessToken,\n//             mapboxgl: mapboxgl,\n//         });\n\n//         // Add the search bar to the heatmap\n//         map.addControl(geocoder);\n\n//         map.on('load', () => {\n//             // state data vector tileset\n//             map.addSource('state', {\n//                 // type: 'vector',\n//                 // url: \"mapbox://jholsch29.6l4kskpb\",\n//                 // \"promoteId\": {\"stateReforestation-ad4r41\": \"NAME\"},\n\n//                 type: 'geojson',\n//                 data: \"http://34.42.91.15/hardcode.geojson\"\n\n//             });\n\n//             // county data vector tileset\n//             map.addSource('county', {\n//                 type: 'vector',\n//                 url: \"mapbox://jholsch29.7n25de6t\",\n//                 \"promoteId\": {\"countyReforestation-dszxt3\": \"GEO_ID\"},\n//             });\n\n//             // add choropleth layer for state level\n//             map.addLayer({\n//                 id: 'state-data',\n//                 source: 'state',\n//                 // 'source-layer': 'stateReforestation-ad4r41',  // vector tileset name\n//                 maxzoom: zoomThreshold,\n//                 type: 'fill',\n//                 filter: ['==', 'isState', \"yes\"],\n//                 paint: {\n//                     'fill-color': [\n//                         'case',\n//                         ['boolean', ['feature-state', 'hover'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         ['boolean', ['feature-state', 'click'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         [\n//                             'interpolate',\n//                             ['linear'],\n//                             ['get', 'class'],\n//                             0,\n//                             props.colors.color0,\n//                             1,\n//                             props.colors.color1,\n//                             2,\n//                             props.colors.color2,\n//                             3,\n//                             props.colors.color3,\n//                             4,\n//                             props.colors.color4,\n//                             5,\n//                             props.colors.color5,\n//                             6,\n//                             props.colors.color6,\n//                             7,\n//                             props.colors.color7\n//                         ]\n//                     ],\n//                     'fill-opacity': .85\n//                 },\n\n//             });\n\n//             map.addLayer({\n//                 id: 'county-data',\n//                 source: 'county',\n//                 'source-layer': 'countyReforestation-dszxt3',  // vector tileset name\n//                 minzoom: zoomThreshold,\n//                 type: 'fill',\n//                 filter: ['==', 'isState', \"no\"],\n//                 paint: {\n//                     'fill-color': [\n//                         'case',\n//                         ['boolean', ['feature-state', 'hover'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         ['boolean', ['feature-state', 'click'], false],\n//                         '#ffe37a', // Color to use when the condition is true (clicked)\n//                         [\n//                             'interpolate',\n//                             ['linear'],\n//                             ['get', 'class'],\n//                             0,\n//                             props.colors.color0,\n//                             1,\n//                             props.colors.color1,\n//                             2,\n//                             props.colors.color2,\n//                             3,\n//                             props.colors.color3,\n//                             4,\n//                             props.colors.color4,\n//                             5,\n//                             props.colors.color5,\n//                             6,\n//                             props.colors.color6,\n//                             7,\n//                             props.colors.color7\n//                         ] // Default color based on the 'class' property\n//                     ],\n//                     'fill-opacity': .85,\n//                 },\n//             });\n\n//             // define boundary lines for states so that\n//             // divisions are always obvious regardless of zoom\n//             map.addLayer({\n//                 id: 'state-boundaries',\n//                 source: 'state',\n//                 'source-layer': 'stateReforestation-ad4r41',\n//                 type: 'line',\n//                 paint: {\n//                     'line-color': '#000',\n//                     'line-width': .1\n//                 }\n//             });\n\n//             // define boundary lines for counties so that\n//             // divisions are always obvious regardless of zoom\n//             map.addLayer({\n//                 id: 'county-boundaries',\n//                 source: 'county',\n//                 'source-layer': 'countyReforestation-dszxt3',\n//                 type: 'line',\n//                 paint: {\n//                     'line-color': '#000',\n//                     'line-width': .1\n//                 }\n//             });\n\n//         });\n\n//         let stateHoveredPolygonId = null;\n//         let stateClickedPolygonId = null;\n//         let countyHoveredPolygonId = null;\n//         let countyClickedPolygonId = null;\n//         // When the map is clicked display a popup\n//         map.on('click', 'state-data', (e) => {\n//             // Commented out code that was used when we had the dropdown option\n//             //let dropdown = document.getElementById(\"dropdown\");\n//             //let title = dropdown.options[dropdown.selectedIndex].text\n//             //title + \": \" + e.features[0].properties[dropdown.value]\n//             // Get the feature's properties\n//             //The features at the coordinate that was picked\n\n//             // the span elements used in the sidebar\n//             const nameDisplay = document.getElementById('name');\n//             const costDisplay = document.getElementById('cost');\n//             const landDisplay = document.getElementById('land');\n//             const zDisplay = document.getElementById('z');\n//             const popDisplay = document.getElementById('pop');\n//             const preDisplay = document.getElementById('pre');\n//             const tempDisplay = document.getElementById('temp');\n\n//             // the properties of the feature\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const stateName = properties['NAME'];\n//             const stateCost = parseFloat(properties['cost']);\n//             const stateLand = parseFloat(properties['land']);\n//             const stateZ = parseFloat(properties['palmer']);\n//             const statePop = parseFloat(properties['population']);\n//             const statePre = parseFloat(properties['precipitation']);\n//             const stateTemp = parseFloat(properties['temperature']);\n\n//             // Function to format currency with dollar sign and commas\n//             function formatCurrency(value) {\n//                 return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             //Function to format percent\n//             function formatPercent(value) {\n//                 value = value * 100;\n//                 return value.toFixed(0) + '%';\n//             }\n\n//             // Function to add commas as thousands separators\n//             function addCommas(value) {\n//                 return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             // Display the property values\n//             nameDisplay.textContent = stateName;\n//             costDisplay.textContent = formatPercent(stateCost);\n//             landDisplay.textContent = formatCurrency(stateLand);\n//             zDisplay.textContent = stateZ.toFixed(2);\n//             popDisplay.textContent = addCommas(statePop);\n//             preDisplay.textContent = statePre.toFixed(2);\n//             tempDisplay.textContent = stateTemp.toFixed(2);\n\n//             if (stateClickedPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateClickedPolygonId},\n//                     {click: false}\n//                 );\n//             }\n//             // Set the state of the clicked feature to 'click'\n//             stateClickedPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateClickedPolygonId},\n//                 {click: true}\n//             );\n\n//         });\n\n//         map.on('mousemove', 'state-data', (e) => {\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const countyName = properties['NAME'];\n//             if (stateHoveredPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n\n//             // Set the state of the clicked feature to 'click'\n//             stateHoveredPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                 {hover: true}\n//             );\n\n//         });\n\n//         map.on('mouseleave', 'state-data', () => {\n//             if (stateHoveredPolygonId !== null) {\n//                 map.setFeatureState(\n//                     {source: 'state', sourceLayer: 'stateReforestation-ad4r41', id: stateHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n//             stateHoveredPolygonId = null;\n//         });\n\n//         map.on('mousemove', 'county-data', (e) => {\n//             if (countyHoveredPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature in the 'county-data' layer\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n\n//             // Set the state of the hovered feature in the 'county-data' layer to 'hover'\n//             countyHoveredPolygonId = e.features[0].id;\n//             map.setFeatureState(\n//                 {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                 {hover: true}\n//             );\n//         });\n//         map.on('mouseleave', 'county-data', () => {\n//             if (countyHoveredPolygonId !== null) {\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyHoveredPolygonId},\n//                     {hover: false}\n//                 );\n//             }\n//             countyHoveredPolygonId = null;\n//         });\n//         // When the map is clicked display a popup\n//         map.on('click', 'county-data', (e) => {\n\n//             // the span elements used in the sidebar\n//             const nameDisplay = document.getElementById('name');\n//             const costDisplay = document.getElementById('cost');\n//             const landDisplay = document.getElementById('land');\n//             const zDisplay = document.getElementById('z');\n//             const popDisplay = document.getElementById('pop');\n//             const preDisplay = document.getElementById('pre');\n//             const tempDisplay = document.getElementById('temp');\n\n//             // the properties of the feature\n//             const properties = e.features[0].properties;\n\n//             // the current features properties\n//             const countyName = properties['NAME'];\n//             const countyCost = parseFloat(properties['cost']);\n//             const countyLand = parseFloat(properties['land']);\n//             const countyZ = parseFloat(properties['palmer']);\n//             const countyPop = parseFloat(properties['population']);\n//             const countyPre = parseFloat(properties['precipitation']);\n//             const countyTemp = parseFloat(properties['temperature']);\n\n//             // Function to format currency with dollar sign and commas\n//             function formatCurrency(value) {\n//                 return '$' + value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             //Function to format percent\n//             function formatPercent(value) {\n//                 value = value * 100;\n//                 return value.toFixed(0) + '%';\n//             }\n//             // Function to add commas as thousands separators\n//             function addCommas(value) {\n//                 return value.toFixed(0).replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\n//             }\n\n//             // Display the property values\n//             nameDisplay.textContent = countyName;\n//             costDisplay.textContent = formatPercent(countyCost);\n//             landDisplay.textContent = formatCurrency(countyLand);\n//             zDisplay.textContent = countyZ.toFixed(2);\n//             popDisplay.textContent = addCommas(countyPop);\n//             preDisplay.textContent = countyPre.toFixed(2);\n//             tempDisplay.textContent = countyTemp.toFixed(2);\n\n//             if (countyClickedPolygonId !== null) {\n//                 // Reset the state of the previously clicked feature in the 'county-data' layer\n//                 map.setFeatureState(\n//                     {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyClickedPolygonId},\n//                     {click: false}\n//                 );\n//             }\n\n//             // Set the state of the clicked feature in the 'county-data' layer to 'click'\n//             countyClickedPolygonId = e.features[0].id;\n\n//             map.setFeatureState(\n//                 {source: 'county', sourceLayer: 'countyReforestation-dszxt3', id: countyClickedPolygonId},\n//                 {click: true}\n//             );\n\n//         });\n\n//         map.on('mouseenter', 'county-data', () => {\n//             map.getCanvas().style.cursor = 'pointer';\n//         });\n\n//         map.on('mouseleave', 'county-data', () => {\n//             map.getCanvas().style.cursor = '';\n//         });\n\n//     }, []);\n\n//     return (\n\n//         <div ref={mapContainer} className=\"map-container\">\n//             <div className='info-section'>\n//                 <div className='state-name'><span id='name'></span></div>\n//                 <hr className='name-line'/>\n//                 <div><strong>Cost Efficiency:</strong> <span id='cost'></span></div>\n//                 <div><strong>Land prices:</strong> <span id='land'></span></div>\n//                 <div><strong>Palmer-z index:</strong> <span id='z'></span></div>\n//                 <div><strong>Population:</strong> <span id='pop'></span></div>\n//                 <div><strong>Precipitation:</strong> <span id='pre'></span></div>\n//                 <div><strong>Temperature:</strong> <span id='temp'></span></div>\n//                 <Link to=\"/moreinfo\">More Info</Link>\n//             </div>\n\n//             <div id=\"legend\" className=\"legend\" style={{display: legendDisplay}}>\n//                 <h4>Cost Efficency</h4>\n//                 <h3>Most</h3>\n//                 <div><span className=\"b723122\" style={{backgroundColor: props.colors.color7}}></span></div>\n//                 <div><span className=\"b8b4225\" style={{backgroundColor: props.colors.color6}}></span></div>\n//                 <div><span className=\"ba25626\" style={{backgroundColor: props.colors.color5}}></span></div>\n//                 <div><span className=\"bb86b25\" style={{backgroundColor: props.colors.color4}}></span></div>\n//                 <div><span className=\"bca8323\" style={{backgroundColor: props.colors.color3}}></span></div>\n//                 <div><span className=\"bda9c20\" style={{backgroundColor: props.colors.color2}}></span></div>\n//                 <div><span className=\"be6b71e\" style={{backgroundColor: props.colors.color1}}></span></div>\n//                 <h3>Least</h3>\n//             </div>\n//         </div>\n\n//     );\n// }\n\n// export default ChoroplethMap;\n\n","/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Action/Action.js",[],[],"/Users/ediehaase/Downloads/Capstone Git repo/cse498-anthropocene-institute/frontend/src/pages/Feedback/Feedback.js",[],[],{"ruleId":"171","severity":1,"message":"172","line":174,"column":12,"nodeType":"173","messageId":"174","endLine":174,"endColumn":68,"fix":"175"},{"ruleId":"176","severity":1,"message":"177","line":1,"column":8,"nodeType":"178","messageId":"179","endLine":1,"endColumn":14},{"ruleId":"176","severity":1,"message":"180","line":1,"column":17,"nodeType":"178","messageId":"179","endLine":1,"endColumn":25},{"ruleId":"181","severity":1,"message":"182","line":43,"column":9,"nodeType":"173","endLine":49,"endColumn":11},{"ruleId":"171","severity":1,"message":"172","line":52,"column":46,"nodeType":"173","messageId":"174","endLine":52,"endColumn":107,"fix":"183"},{"ruleId":"176","severity":1,"message":"184","line":1,"column":8,"nodeType":"178","messageId":"179","endLine":1,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":19,"column":16,"nodeType":"187","messageId":"188","endLine":22,"endColumn":92},{"ruleId":"185","severity":1,"message":"186","line":24,"column":16,"nodeType":"187","messageId":"188","endLine":26,"endColumn":98},{"ruleId":"171","severity":1,"message":"172","line":98,"column":9,"nodeType":"173","messageId":"174","endLine":98,"endColumn":46,"fix":"189"},{"ruleId":"181","severity":1,"message":"182","line":70,"column":13,"nodeType":"173","endLine":75,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":105,"column":13,"nodeType":"173","endLine":110,"endColumn":15},{"ruleId":"181","severity":1,"message":"182","line":142,"column":13,"nodeType":"173","endLine":147,"endColumn":15},{"ruleId":"171","severity":1,"message":"172","line":16,"column":9,"nodeType":"173","messageId":"174","endLine":16,"endColumn":71,"fix":"190"},{"ruleId":"181","severity":1,"message":"182","line":17,"column":11,"nodeType":"173","endLine":22,"endColumn":13},{"ruleId":"171","severity":1,"message":"172","line":26,"column":7,"nodeType":"173","messageId":"174","endLine":26,"endColumn":44,"fix":"191"},{"ruleId":"181","severity":1,"message":"182","line":42,"column":9,"nodeType":"173","endLine":48,"endColumn":11},{"ruleId":"176","severity":1,"message":"192","line":222,"column":31,"nodeType":"178","messageId":"179","endLine":222,"endColumn":41},{"ruleId":"193","severity":1,"message":"194","line":513,"column":11,"nodeType":"195","endLine":513,"endColumn":64,"suggestions":"196"},{"ruleId":"193","severity":1,"message":"197","line":513,"column":17,"nodeType":"187","endLine":513,"endColumn":63},{"ruleId":"176","severity":1,"message":"198","line":15,"column":11,"nodeType":"178","messageId":"179","endLine":15,"endColumn":24},{"ruleId":"193","severity":1,"message":"194","line":191,"column":8,"nodeType":"195","endLine":191,"endColumn":10,"suggestions":"199"},{"ruleId":"176","severity":1,"message":"192","line":220,"column":27,"nodeType":"178","messageId":"179","endLine":220,"endColumn":37},{"ruleId":"193","severity":1,"message":"194","line":509,"column":8,"nodeType":"195","endLine":509,"endColumn":69,"suggestions":"200"},{"ruleId":"193","severity":1,"message":"201","line":509,"column":14,"nodeType":"187","endLine":509,"endColumn":68},"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"202","text":"203"},"no-unused-vars","'nReact' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"range":"204","text":"203"},"'Heatmap' is defined but never used.","no-multi-str","Multiline support is limited to browsers supporting ES5 only.","Literal","multilineString",{"range":"205","text":"203"},{"range":"206","text":"203"},{"range":"207","text":"203"},"'countyName' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'props.colors.color0', 'props.colors.color1', 'props.colors.color2', 'props.colors.color3', 'props.colors.color4', 'props.colors.color5', 'props.colors.color6', and 'props.colors.color7'. Either include them or remove the dependency array.","ArrayExpression",["208"],"The \"http://34.133.43.211/dacstategeojson.geojson\" literal is not a valid dependency because it never changes. You can safely remove it.","'zoomThreshold' is assigned a value but never used.",["209"],["210"],"The \"http://34.133.43.211/forestationstategeojson.geojson\" literal is not a valid dependency because it never changes. You can safely remove it.",[6001,6001]," rel=\"noreferrer\"",[2491,2491],[3580,3580],[542,542],[785,785],{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"211","fix":"215"},"Update the dependencies array to be: [map, props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",{"range":"216","text":"217"},"Update the dependencies array to be: [props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",{"range":"218","text":"219"},{"range":"220","text":"217"},[22944,22997],"[map, props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",[6982,6984],"[props.colors.color0, props.colors.color1, props.colors.color2, props.colors.color3, props.colors.color4, props.colors.color5, props.colors.color6, props.colors.color7]",[21160,21221]]